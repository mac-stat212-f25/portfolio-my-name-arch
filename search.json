[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT212 Portfolio",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "src/pv/pv-01.html",
    "href": "src/pv/pv-01.html",
    "title": "Professional Viz Sample",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Prof Viz",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Professional Viz Sample</span>"
    ]
  },
  {
    "objectID": "src/tt/2025-07-08.html",
    "href": "src/tt/2025-07-08.html",
    "title": "TidyTuesday Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>TidyTuesday Sample 1</span>"
    ]
  },
  {
    "objectID": "src/tt/2025-07-15.html",
    "href": "src/tt/2025-07-15.html",
    "title": "TT1",
    "section": "",
    "text": "Add content here\n\nCode#The data set provided to us provides information about chess rankings in the month of september.\n#Within the data set, we have Sex, Nationality, Rating, Games, and Bday year. \n#We also find the title that they may hold. This title depends on gender. There is also space for other titles. \n#The research question that I have come up with is is there a relationship between your rating and the year within which you were born. \n#How I am going to show this is with a bar graph, it will have the decade along the x axis and along the y axis, the count of the occurences of each title.\n# Install and load necessary libraries\nlibrary(tidyverse)\n\n# Load the dataset\n\nfide_ratings &lt;- read_csv(\"~/Documents/GitHub/portfolio-my-name-arch/data/raw/fide_ratings_september.csv\")\n\nfide_ratings_clean &lt;- fide_ratings %&gt;%\n  drop_na(bday, rating) %&gt;%\n  filter(bday != 0) %&gt;%\n  mutate(decade = floor(bday / 10) * 10)\n\n\n\naverage_rating_by_decade &lt;- fide_ratings_clean %&gt;%\n  group_by(decade) %&gt;%\n  summarise(average_rating = mean(rating, na.rm = TRUE))\n\nggplot(average_rating_by_decade, aes(x = factor(decade), y = average_rating)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", width = 0.7) +\n  geom_text(aes(label = round(average_rating, 0)), vjust = -0.5) +\n  labs(\n    title = \"Average Chess Rating by Birth Decade\",\n    Subtitle=\"Stat 212 Amin Al Hashim\",\n    x = \"Decade\",\n    y = \"Average Rating\",\n    caption = \"Dooley Kim, 09-07-2025, Data source: fide_ratings_september.csv.\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = .5))\n\n\n\n\n\n\nCodetop_titles &lt;- fide_ratings_clean %&gt;%\n  filter(title != \"NA\") %&gt;%\n  count(title, sort = TRUE) %&gt;%\n  top_n(5) %&gt;%\n  pull(title)\n\nfide_top_titles &lt;- fide_ratings_clean %&gt;%\n  filter(title %in% top_titles)\n\nggplot(fide_top_titles, aes(x = factor(decade), fill = title)) +\n  geom_bar(position = \"dodge\", width = .5) +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n\n    position = position_dodge(width = .5),\n    vjust = -0.5,\n    size = 3\n  ) +\n  labs(\n    title = \"Count of Top 5 Chess Titles by Birth Decade\",\n    subtitle=\"Stat 212 Amin Al Hashim\",\n    x = \"Decade\",\n    y = \"Count of Titles\",\n    fill = \"Title\",\n    caption = \"Dooley Kim, 09-07-2025, Data source: fide_ratings_september.csv.\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = .5))",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>TT1</span>"
    ]
  },
  {
    "objectID": "src/tt/hw04-tt.html",
    "href": "src/tt/hw04-tt.html",
    "title": "Homework 04",
    "section": "",
    "text": "TidyTuesday Section (optional)\nExplore the week’s TidyTuesday challenge. Develop a research question, then answer it through a short data story with effective visualization(s). Provide sufficient background for readers to grasp your narrative.\nCodelibrary(tidyverse)\nCodecranes &lt;- read_csv(\"~/Documents/GitHub/portfolio-my-name-arch/src/tt/cranes.csv\")\ncrane_summary &lt;- cranes %&gt;%\n  mutate(observations = as.numeric(observations)) %&gt;%\n  filter(comment != 'Record observation') %&gt;%\n  group_by(comment) %&gt;%\n  summarize(\n    avg_observations = mean(observations, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\n\nprint(crane_summary)\n\n# A tibble: 6 × 2\n  comment               avg_observations\n  &lt;chr&gt;                            &lt;dbl&gt;\n1 Bad weather                       NaN \n2 Canceled/No count                   0 \n3 First count of season            1114.\n4 Last count of season              518.\n5 Severe interference             15000 \n6 Uncertain count                 11712.\n\nCodeggplot(crane_summary, aes(x = comment, y = avg_observations, fill = comment)) +\n\n  geom_col(width = 0.6) +\n  geom_text(\n    # Label the bars with the rounded average value\n    aes(label = round(avg_observations, 0)),\n    vjust = -0.5, \n    size = 4\n  ) +\n  labs(\n    title = \"Average Observations by Comment Type\",\n    subtitle = \"Stat 212 Amin Al Hashim\",\n    x = \"Comment Type\",\n    y = \"Average Number of Observations\",\n    caption = \"Dooley Kim, 10-01-2025, Data source: cranes.csv.\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\"\n  )\nThe question that I had was is there a relationship between crane observations and the comment on a day. I realized that there are certain comments that are left on days. So I was curious, whether these comments bear any effect on the amount observed. I did not include the record observations because I know that they will obviously have a higher average number of observations.\nSo what this graph shows me is that the days when there is severe interference or an uncertain amount, we can expect a very high count, but the ends of the season do not see that many observations on average. This makes a bit of sense because logically,because at the borders of the season, it is probably a lot futher from the peak of the season which I would expect to be in the middle of the season. I was a bit surprised at how high severe interference and uncertain amount are.",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 04</span>"
    ]
  },
  {
    "objectID": "src/tt/hw04-tt.html#tidytuesday-section-optional",
    "href": "src/tt/hw04-tt.html#tidytuesday-section-optional",
    "title": "Homework 04",
    "section": "",
    "text": "Instructions\n\n\n\nYou can count work on this week’s TidyTuesday toward the exceptional work required for an A in the Homework component.",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Homework 04</span>"
    ]
  },
  {
    "objectID": "src/ica/ica-sample1.html",
    "href": "src/ica/ica-sample1.html",
    "title": "ICA Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ICA Sample 1</span>"
    ]
  },
  {
    "objectID": "src/ica/ica-sample2.html",
    "href": "src/ica/ica-sample2.html",
    "title": "ICA Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ICA Sample 2</span>"
    ]
  },
  {
    "objectID": "src/ica/cleaning.html",
    "href": "src/ica/cleaning.html",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Exercise\nCarryout the following steps to clean and save the San Francisco Weather data. Make sure to download and add the data file to your portfolio repository as instructed.\nCodelibrary(tidyverse)\nweather=read.csv(\"../../data/raw/weather.csv\")\nhead(weather)\n\n  Month Day Low High NormalLow NormalHigh RecordLow LowYr RecordHigh HiYear\n1    11  20  48   55        48         62        35  1964         69   2005\n2     6  16  52   68        53         70        46  1952         90   1961\n3     5   9  47   63        50         66        41  1950         88   1993\n4    10  26  47   69        52         69        39  1954         89   2003\n5     9  27  55   82        55         73        47  1955         96   2010\n6     7   6  52   70        54         71        47  1953         86   1957\n  Precip RecordPrecip PrecipYr     date Record RecordText RecordP CulmPrec\n1   0.17         0.75     1961 11/20/11  FALSE       &lt;NA&gt;   FALSE     1.42\n2   0.00         0.35     1995  6/16/11  FALSE       &lt;NA&gt;   FALSE     0.97\n3   0.00         0.20     1980   5/9/11  FALSE       &lt;NA&gt;   FALSE     0.00\n4   0.00         1.20     2004 10/26/11  FALSE       &lt;NA&gt;   FALSE     1.18\n5   0.00         0.81     1957  9/27/11  FALSE       &lt;NA&gt;   FALSE     0.01\n6   0.00         0.00    99999   7/6/11  FALSE       &lt;NA&gt;   FALSE     0.00\n\nCode     weather_cleaned&lt;-(weather)%&gt;%\n       mutate(precipYr=na_if(PrecipYr,99999))%&gt;%\n       mutate(dateInYear=1:365)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/cleaning.html#exercise",
    "href": "src/ica/cleaning.html#exercise",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Read in the weather data in this file with the correct relative file path after you move it to the instructed location.\nThere is a variable that has values that don’t make sense in the data context. Figure out which variable this is and clean it up by making those values missing using na_if().\nCreate a variable called dateInYear that indicates the day of the year (1-365) for each case. (Jan 1 should be 1, and Dec 31 should be 365).\nCreate a variable called month_name that shows the 3-letter abbreviation for each case.\nSave the wrangled data to the data/processed/ folder using write_csv(). Name this file weather_clean.csv. Look up the documentation for this function by typing ?write_csv in the Console. You’ll need to write an appropriate relative path.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html",
    "href": "src/ica/03-adv-ggplot-notes.html",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#learning-goals",
    "href": "src/ica/03-adv-ggplot-notes.html#learning-goals",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "Navigate ggplot2 reference page to find needed functions for a desired visualization\nNavigate the different sections of a function help page to construct desired plot features, in particular,\n\nNavigate the Usage section to identify arguments that must be set\nNavigate the Arguments section to understand how arguments work\nNavigate the Aesthetics section to learn how plot appearance can be controlled\nNavigate the Examples section for some usage examples\n\n\nIdentify when to use different data arguments within ggplot() and geom_() layers",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#introduction",
    "href": "src/ica/03-adv-ggplot-notes.html#introduction",
    "title": "3 Advanced Data Viz",
    "section": "Introduction 1\n",
    "text": "Introduction 1\n\nIn this lesson, we are going to recreate NYTimes 2015 Temperature Visualization (html) using data from San Francisco (SFO) in 2011.\n\n\nScreenshot of NYTimes 2015 Temperature Visualization",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#reading-data",
    "href": "src/ica/03-adv-ggplot-notes.html#reading-data",
    "title": "3 Advanced Data Viz",
    "section": "Reading Data",
    "text": "Reading Data\nRun the code chunk below to load the tidyverse package and read in the San Francisco weather data.\n\nCodelibrary(tidyverse)\nweather &lt;- read_csv(\"https://mac-stat.github.io/data/sfo_weather.csv\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#understanding-data",
    "href": "src/ica/03-adv-ggplot-notes.html#understanding-data",
    "title": "3 Advanced Data Viz",
    "section": "Understanding Data",
    "text": "Understanding Data\nBelow is the codebook of the data. Familiarize yourself with the meaning of each variable. Use the codebook as a reference when using the data.\n\n\nMonth: Month of the year (1-12)\n\nDay: Day within the month (1-31)\n\nLow/High: Low/high temperature this day\n\nNormalLow/NormalHigh: Typical low/high temperature for this day of the year\n\nRecordLow/RecordHigh: Record low/high temperature for this day of the year\n\nLowYr/HighYr: Year in which the record low/high was observed\n\nPrecip: Amount of precipitation (inches) this day\n\nRecordPrecip: Record amount of precipitation for this day of the year\n\nPrecipYr: Year in which the record precipitation was observed\n\ndate: The actual date in 2011 for this day in YYYY-MM-DD format\n\ndateInYear: What day of the year is it? (1-365)\n\nRecord: Logical (TRUE/FALSE) indicating whether this day had a high temperature record\n\nRecordText: Text that displays the record high for this day (\"Record high: ##\")\n\nRecordP: Logical (TRUE/FALSE) indicating whether this day had a precipitation record\n\nCulmPrec: Cumulative precipitation for the month up to this day",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-1",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-1",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 1",
    "text": "Exercise 1\nExamine the NYTimes 2015 Temperature Visualization (html) then answer the following questions.\nData Storytelling\n\nRelate the intro paragraph: “Scientists declared that 2015 was Earth’s hottest year on record…” to the design of the visualization. In particular, based on the intro paragraph,\n\nWhat key message/claim does NYTimes want readers to be able to explore? They want the readers to explore the claim that it was hotter in 2015 than any years before\nHow did this goal inform what information is displayed in the visualization? This goal informs that by showing not only 2015 data, but also data from previous years. Aesthetic Mapping\n\n\n\nWhat specific variables (from the data codebook) underlie the visualization? Month, Day, Low/High, NormalLow/High, Record, RecordText, RecordLow/RecordHigh\nHow do these variables map to aesthetics of the visual elements, eg, position, size, shape, and color of glyphs? Month and day go along the x axis,",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-2",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-2",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 2",
    "text": "Exercise 2\nNavigate the Geoms section of the ggplot2 reference page to find a geom that corresponds to the visual elements in the temperature plot. Using both the small thumbnail visuals on the right and the names of the geom’s, brainstorm some possibilities for geom’s you might use to recreate the temperature visualization.\n\n\n\n\n\n\nNavigating Documentation / Reference Pages\n\n\n\nYou need to navigate the geoms further by opening up their reference pages to understand if a particular geom is suitable for our task. Let’s look at the geom_point documentation page to learn how to read a documentation page..\nThe Usage section shows all of the possible inputs (arguments) to the geom. These are all of the ways that a geom can be customized. Just looking at the argument names can help give a hint as to what arguments might fit our needs.\nThe Arguments section, on the other hand, explains in detail what each argument does and the possible values the argument can take. The mapping, data, and ... arguments will be the most commonly used by far.\n\n\nmapping is the argument that is being used when we specify which variables should link or map to the plot aesthetics (the code inside aes()).\n\ndata is the argument where we specify the dataset containing the variables that the geom is using.\n\n... is used for fixed aesthetics (ones that don’t correspond to a variable), eg, to set the color of all points, we use color = \"red\" and to set the size of all points, we use size = 3.\n\nThe Aesthetics section of a geom documentation page gives information on how the visual elements of the geom correspond to data. For example, the geom_point documentation page shows that x and y aesthetics are available. It also shows some new aesthetics like stroke.\n\n\n\n\n\n\n\n\ndata Argument\n\n\n\nPreviously you have used one dataset per plot by specifying that as the first argument of ggplot(). However, multiple data sets can be passed into ggplot as shown in the example below.\n\nCodedata(diamonds)\n\ndiamonds_avg_price &lt;- diamonds |&gt;\n  group_by(carat) |&gt;\n  summarize(avg_price = mean(price)) |&gt;\n  arrange(carat)\ndiamonds_avg_price &lt;- diamonds_avg_price[seq(1, nrow(diamonds_avg_price), 3), ]\n\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  geom_point(\n    data = diamonds_avg_price,\n    aes(x = carat, y = avg_price),\n    color = \"deepskyblue\",\n    size = 3\n  )\n\n\n\n\n\n\n\n\n\nLook at the geom_linerange documentation page and start off your temperature visualization with the record lows and highs. Your plot should look like the one below. The hex code of the used light tan color is #ECEBE3.\n\n\nSFO Weather Records in 2011\n\n\nCodeggplot(weather) +\n    theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard Shortcuts\n\n\n\nAs you work on this plot, try to use some new keyboard shortcuts. Focus on the following:\n\nInsert code chunk: Ctrl+Alt+I (Windows). Option+Command+I (Mac).\nRun current code chunk: Ctrl+Shift+Enter (Windows). Command+Shift+Return (Mac).\nRun current line/currently selected lines: Ctrl+Enter (Windows). Command+Return (Mac).",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-3",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-3",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 3",
    "text": "Exercise 3\nIn your visualization, also display the usual temperatures (NormalLow and NormalHigh) and actual 2011 temperatures (Low and High). Your plot should look like the one below. The hex code of the color used for the usual temperatures is \"#C8B8BA\" and for the color used for actual temperatures is \"#A90248\".\n\n\nSFO observed, Average, and Record Daily Temperatures in 2011\n\n\nCodeggplot(weather, aes(x = dateInYear)) +\n  # Layer 1: Record temperature range (light tan background)\n  geom_linerange(aes(ymin = RecordLow, ymax = RecordHigh), color = \"#ECEBE3\", linewidth = 4) +\n  \n  # Layer 2: Normal temperature range (grayish middle layer)\n  geom_linerange(aes(ymin = NormalLow, ymax = NormalHigh), color = \"#C8B8BA\", linewidth = 4) +\n  \n  # Layer 3: Actual 2011 temperature range (thin red foreground)\n  geom_linerange(aes(ymin = Low, ymax = High), color = \"#A90248\", linewidth = 1.5) +\n  \n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiner Control\n\n\n\nIf you’d like finer control of the width of these lines/rectangles, check out the geom_rect documentation page.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-4",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-4",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 4",
    "text": "Exercise 4\nRecreate the visual demarcations of the months by adding vertical lines separating the months. Brainstorm how we might draw those vertical lines. What geom might we use? What subset of the data might we use in that geom layer to draw lines only at the month divisions?\n\nCode# First, create a data frame with the end day of each month for the vertical lines\nmonth_boundaries &lt;- weather %&gt;%\n  group_by(Month) %&gt;%\n  summarize(end_day = max(dateInYear), .groups = \"drop\")\n\n# Now, add the vertical lines to the plot from Exercise 3\nggplot(weather, aes(x = dateInYear)) +\n  geom_linerange(aes(ymin = RecordLow, ymax = RecordHigh), color = \"#ECEBE3\", linewidth = 4) +\n  geom_linerange(aes(ymin = NormalLow, ymax = NormalHigh), color = \"#C8B8BA\", linewidth = 4) +\n  geom_linerange(aes(ymin = Low, ymax = High), color = \"#A90248\", linewidth = 1.5) +\n  \n  # Add vertical lines at the end of each month\n  # We use end_day + 0.5 to place the line between two days\n  geom_vline(data = month_boundaries, aes(xintercept = end_day + 0.5), color = \"white\", linewidth = 1) +\n  \n  theme_classic()",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-5",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-5",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 5",
    "text": "Exercise 5\nChange the x-axis labels so that the month names display in the center of each month’s slice of the plot.\n\n\n\n\n\n\nMonth Names\n\n\n\nR has built-in variables called month.abb and month.name that contain abbreviated and full month names.\n\n\n\nCode# Create a data frame for month boundaries (for the white vertical lines)\nmonth_boundaries &lt;- weather %&gt;%\n  group_by(Month) %&gt;%\n  summarize(end_day = max(dateInYear), .groups = \"drop\")\n\n# Create a data frame for month midpoints (for the x-axis labels)\nmonth_midpoints &lt;- weather %&gt;%\n  group_by(Month) %&gt;%\n  summarize(mid_day = mean(dateInYear), .groups = \"drop\")\n\n# Build the final combined plot\nggplot(weather, aes(x = dateInYear)) +\n  # Layer 1: Record temperature range\n  geom_linerange(aes(ymin = RecordLow, ymax = RecordHigh), color = \"#ECEBE3\", linewidth = 4) +\n  \n  # Layer 2: Normal temperature range\n  geom_linerange(aes(ymin = NormalLow, ymax = NormalHigh), color = \"#C8B8BA\", linewidth = 4) +\n  \n  # Layer 3: Actual 2011 temperature range\n  geom_linerange(aes(ymin = Low, ymax = High), color = \"#A90248\", linewidth = 1.5) +\n  \n  # Add vertical lines to separate months\n  geom_vline(data = month_boundaries, aes(xintercept = end_day + 0.5), color = \"white\", linewidth = 1) +\n  \n  # Use scale_x_continuous to create custom month labels\n  scale_x_continuous(\n    name = NULL, # Remove axis title\n    breaks = month_midpoints$mid_day,\n    labels = month.abb,\n    expand = c(0.01, 0.01) \n  ) +\n  \n  # Final theme adjustments\n  labs(y = \"Temperature (°F)\") +\n  theme_classic() +\n  theme(\n    axis.ticks.x = element_blank(), \n    panel.grid = element_blank()    \n  )\n\n\n\n\n\n\n\nTry to figuring out this new challenge using search engines and LLMs:\n\nSearch Engines. Use Google to search for possible solutions using the jargon that is most likely to return the most relevant results. Record search queries and your thought process in selecting which search results to look at first.\nLLMs. Use ChatGPT or Gemini with prompts that will most efficiently get you the desired results. Record the chat prompts used and output given. Evaluate the output. Do you fully understand the code generated? How can you tell that the generated code is correct?\n\nI first asked it to split Excersise 2 code by month, then asked to combine it into one graph",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#exercise-6",
    "href": "src/ica/03-adv-ggplot-notes.html#exercise-6",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 6",
    "text": "Exercise 6\nCreate a precipitation plot that looks like the following. Note that\n\nThe triangles point to precipitation records–refer to the data codebook above for the RecordP variable.\nThe numbers on the plot indicate the total precipitation for the month–search the hjust and vjust options to adjust the alignment of the numbers.\nThe blue and tan colors hex codes are \"#32a3d8\" and \"#ebeae2\", respectively.\n\n\n\nSFO Precipitation in 2011\n\n\nCode# --- Data Preparation ---\n# 1. Summarize data by month for labels, midpoints, and boundaries\nmonthly_summary &lt;- weather %&gt;%\n  group_by(Month) %&gt;%\n  summarize(\n    total_precip = sum(Precip),\n    mid_day = mean(dateInYear),\n    end_day = max(dateInYear),\n    .groups = \"drop\"\n  )\n\n# 2. Filter for days with record precipitation for the triangles\nrecord_precip_days &lt;- weather %&gt;%\n  filter(RecordP == TRUE)\n\n# --- Plot Creation ---\nggplot(weather, aes(x = dateInYear)) +\n  # Layer 1: Record Precipitation (tan background bars)\n  geom_col(aes(y = RecordPrecip), fill = \"#ebeae2\", width = 1) +\n  \n  # Layer 2: Actual Precipitation (blue foreground bars)\n  geom_col(aes(y = Precip), fill = \"#32a3d8\", width = 1) +\n  \n  # Layer 3: Triangles for record days (shape = 17 is a solid triangle)\n  geom_point(data = record_precip_days, aes(y = RecordPrecip + 0.05), shape = 17, color = \"#32a3d8\", size = 2) +\n  \n  # Layer 4: Text for monthly totals\n  geom_text(data = monthly_summary, aes(x = mid_day, y = 1.6, label = round(total_precip, 1)), \n            hjust = 0.5, vjust = 0, size = 3.5, color = \"gray40\") +\n  \n  # Layer 5: Month boundary lines\n  geom_vline(data = monthly_summary, aes(xintercept = end_day + 0.5), color = \"white\", linewidth = 1) +\n  \n  # --- Scales and Theming ---\n  scale_x_continuous(\n    name = NULL,\n    breaks = monthly_summary$mid_day,\n    labels = month.abb,\n    expand = c(0.01, 0.01)\n  ) +\n  \n  # Set y-limits to make space for text and remove padding\n  scale_y_continuous(limits = c(0, 1.8), expand = c(0, 0)) +\n  \n  labs(y = NULL, x = NULL) + # Remove axis titles\n  \n  # Start with a completely minimal theme\n  theme_void() + \n  theme(\n    # Add back the x-axis text labels\n    axis.text.x = element_text(color = \"gray40\", margin = margin(t = 5)), \n  )",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#done",
    "href": "src/ica/03-adv-ggplot-notes.html#done",
    "title": "3 Advanced Data Viz",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/03-adv-ggplot-notes.html#footnotes",
    "href": "src/ica/03-adv-ggplot-notes.html#footnotes",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "The exercise in this lesson are inspired by an assignment from the Concepts in Computing with Data course at UC Berkeley taught by Dr. Deborah Nolan.↩︎",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html",
    "href": "src/ica/10-base-r-notes.html",
    "title": "10 Base R",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#learning-goals",
    "href": "src/ica/10-base-r-notes.html#learning-goals",
    "title": "10 Base R",
    "section": "",
    "text": "Identify and define the properties of common structures in R\nSubset vectors and lists with [ by index, name, logical vector, and indirectly with objects\nSubset data frames and lists with $ and [[\n\nUse the str() function to examine the structure of an unfamiliar object and extract components from the object\nApply printing strategies to streamline the debugging and development process",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#common-r-object-structures",
    "href": "src/ica/10-base-r-notes.html#common-r-object-structures",
    "title": "10 Base R",
    "section": "Common R Object Structures",
    "text": "Common R Object Structures\nVector: A vector is a collection of elements of the same type (e.g., numeric, integer, character, logical).\n\nCodenum_vec &lt;- vector(\"numeric\", length = 2) #empty vector: Zeros\nnum_vec\n\n[1] 0 0\n\nCodeclass(num_vec)\n\n[1] \"numeric\"\n\nCodelength(num_vec)\n\n[1] 2\n\n\n\nCodelog_vec &lt;- vector(\"logical\", length = 3) #empty vector: FALSE\nlog_vec\n\n[1] FALSE FALSE FALSE\n\nCodeclass(log_vec)\n\n[1] \"logical\"\n\nCodelength(log_vec)\n\n[1] 3\n\n\n\nCodechr_vec &lt;- vector(\"character\", length = 4) #empty vector: empty strings\nchr_vec\n\n[1] \"\" \"\" \"\" \"\"\n\nCodeclass(chr_vec)\n\n[1] \"character\"\n\nCodelength(chr_vec)\n\n[1] 4\n\n\n\nFun Fact: A vector can have names for each of its elements.\n\n\nCodenamed_vec &lt;- c('name1' = 1, 'name2' = 2) # Named numeric vector\nnamed_vec\n\nname1 name2 \n    1     2 \n\nCodeclass(named_vec)\n\n[1] \"numeric\"\n\nCodelength(named_vec)\n\n[1] 2\n\n\nList: A list is a collection of elements (e.g., vectors, matrices, data frames, other lists).\n\nA list can have different types of elements.\nA list can have names for its elements.\n\n\nCodeex_list &lt;- list(a = 1:3, b = c(\"a\", \"b\", \"c\"), c = matrix(1:6, nrow = 2))\nex_list\n\n$a\n[1] 1 2 3\n\n$b\n[1] \"a\" \"b\" \"c\"\n\n$c\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nCodeclass(ex_list)\n\n[1] \"list\"\n\nCodelength(ex_list) # number of elements in a list\n\n[1] 3",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#other-common-r-object-structures",
    "href": "src/ica/10-base-r-notes.html#other-common-r-object-structures",
    "title": "10 Base R",
    "section": "Other Common R Object Structures",
    "text": "Other Common R Object Structures\nArray: An array is a vector with a dimension attribute.\n\nLike a vector, an array can only have one type of data (e.g., numeric, character).\n\n\nCodeary &lt;- array(NA, dim = c(2,3,4))\nary\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\n, , 4\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\nCodeclass(ary)\n\n[1] \"array\"\n\nCodelength(ary) # The number of elements in a array is the product of its dimensions\n\n[1] 24\n\nCodedim(ary) # Get the dimensions of the array\n\n[1] 2 3 4\n\n\nMatrix: A matrix is an array with only 2 dimensions (rows, columns).\n\nLike a vector, a matrix can only have one type of data (e.g., numeric, character).\n\n\nCodem &lt;- matrix(NA, nrow = 2, ncol = 3)\nm\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\nCodeclass(m)\n\n[1] \"matrix\" \"array\" \n\nCodelength(m) # The number of elements in a matrix is the product of its dimensions\n\n[1] 6\n\nCodedim(m) # Get the dimensions of the matrix\n\n[1] 2 3\n\n\nData Frame/tibble: A data frame is a named list with elements of equal length.\n\nEach element is a “column” in the data frame.\nThe columns can be of different types (e.g., character, numeric, logical, lists, etc.).\nData frames are the most common way to store data in R.\nTibbles do less and complain more than base data.frames\n\n\nCodelibrary(tidyverse)\nmod_df &lt;- tibble(x = 1:10, y = 1:10 + rnorm(10))\n\ndf &lt;- tibble(a = 1:3, b = c(\"constant\", \"x\", \"x squared\"), d = list(lm(y ~ 1, data = mod_df), lm(y ~ x, data = mod_df), lm(y ~ x + I(x^2), data = mod_df)))\ndf\n\n# A tibble: 3 × 3\n      a b         d     \n  &lt;int&gt; &lt;chr&gt;     &lt;list&gt;\n1     1 constant  &lt;lm&gt;  \n2     2 x         &lt;lm&gt;  \n3     3 x squared &lt;lm&gt;  \n\nCodelength(df) # number of \"elements\" in a data frame is the number of \"columns\"\n\n[1] 3",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#base-r-subsetting",
    "href": "src/ica/10-base-r-notes.html#base-r-subsetting",
    "title": "10 Base R",
    "section": "Base R Subsetting",
    "text": "Base R Subsetting\nThe content here comes from Chapter 27 of R4DS, with some small additions.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#selecting-elements-with",
    "href": "src/ica/10-base-r-notes.html#selecting-elements-with",
    "title": "10 Base R",
    "section": "Selecting elements with [\n",
    "text": "Selecting elements with [\n\nWe can subset common R structures and maintain the class structure with [ ].\nThere are four main types of things that you can subset with, i.e., that can be the i in x[i]:\n\n\nA vector of positive integers. Subsetting with positive integers keeps the elements at those positions:\n\n\nCode# Vectors\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\n\n[1] \"three\" \"two\"   \"five\" \n\nCodex[2:4]\n\n[1] \"two\"   \"three\" \"four\" \n\nCodeclass(x[2:4]) # result is a character vector\n\n[1] \"character\"\n\n\n\nCode# Lists\ny &lt;- list(a = 1:3, b = c(\"a\", \"b\", \"c\"), c = matrix(1:6, nrow = 2))\ny[c(1, 2)]\n\n$a\n[1] 1 2 3\n\n$b\n[1] \"a\" \"b\" \"c\"\n\nCodeclass(y[c(1)]) # result is a list\n\n[1] \"list\"\n\n\nBy repeating a position, you can actually make a longer output than input, making the term “subsetting” a bit of a misnomer.\n\nCode# Vector\nx[c(1, 1, 2)]\n\n[1] \"one\" \"one\" \"two\"\n\nCode# List\ny[c(1, 1, 2)]\n\n$a\n[1] 1 2 3\n\n$a\n[1] 1 2 3\n\n$b\n[1] \"a\" \"b\" \"c\"\n\n\n\n\nA vector of negative integers. Negative values drop the elements at the specified positions:\n\n\nCode# Vector\nx[c(-1, -3, -5)]\n\n[1] \"two\"  \"four\"\n\nCode# List\ny[c(-1)]\n\n$b\n[1] \"a\" \"b\" \"c\"\n\n$c\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n\nA logical vector. Subsetting with a logical vector only keeps values corresponding to TRUE. This is generally used with comparison functions and operators.\n\n\nCode# Vector\nx &lt;- c(10, 3, NA, 5, 8, 1, NA)\n\n# All non-missing values of x\nx[!is.na(x)]\n\n[1] 10  3  5  8  1\n\nCode# All values greater than 5, with NAs\nx[x &gt; 5]\n\n[1] 10 NA  8 NA\n\nCode# All non-missing values greater than 5\nx[x &gt; 5 & !is.na(x)]\n\n[1] 10  8\n\n\nUnlike filter(), NA indices will be included in the output as NAs unless you explicitly remove them (filter() removes instances of missing values by default.\n\nCode# Compare with filter \nfilter(tibble(x = x), x &gt; 5)\n\n# A tibble: 2 × 1\n      x\n  &lt;dbl&gt;\n1    10\n2     8\n\n\n\nCode# List\ny[c(TRUE, FALSE, TRUE)]\n\n$a\n[1] 1 2 3\n\n$c\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nCodey[y |&gt; map_lgl(~ is.numeric(.x))] # example of a map function!\n\n$a\n[1] 1 2 3\n\n$c\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nCodey[y |&gt; map_lgl(~ is.character(.x))]\n\n$b\n[1] \"a\" \"b\" \"c\"\n\n\n\n\nA character vector. If you have a named vector or list, you can subset it with a character vector:\n\n\nCode# Named Vector\nx &lt;- c(abc = 1, def = 2, xyz = 5)\nx[c(\"xyz\", \"def\")]\n\nxyz def \n  5   2 \n\nCodex[c(\"xyz\",\"xyz\",\"xyz\", \"def\")]\n\nxyz xyz xyz def \n  5   5   5   2 \n\nCode#Named List\ny[c('a','a','c')]\n\n$a\n[1] 1 2 3\n\n$a\n[1] 1 2 3\n\n$c\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nAs with subsetting with positive integers, you can use a character vector to duplicate individual entries.\nBe very wary of vector recycling when doing this! The number of things that you’re inserting should either be 1 or the size of the x[i] subset.\n\nCodex &lt;- c(first = \"one\", second = \"two\", third = \"three\", fourth = \"four\")\nx\n\n  first  second   third  fourth \n  \"one\"   \"two\" \"three\"  \"four\" \n\n\n\nCodex[c(1, 3)] &lt;- \"new\" # Replacement length is 1\nx\n\n first second  third fourth \n \"new\"  \"two\"  \"new\" \"four\" \n\n\n\nCodex &lt;- c(first = \"one\", second = \"two\", third = \"three\", fourth = \"four\")\nx[c(1, 3)] &lt;- c(\"new1\", \"new2\") # Replacement length is 2, and length of subset is 2\nx\n\n first second  third fourth \n\"new1\"  \"two\" \"new2\" \"four\" \n\n\n\nCodex &lt;- c(first = \"one\", second = \"two\", third = \"three\", fourth = \"four\")\nx[c(1, 3, 4)] &lt;- c(\"new1\", \"new2\") # BAD! Replacement length is 2, and length of subset is 3\nx\n\n first second  third fourth \n\"new1\"  \"two\" \"new2\" \"new1\" \n\n\n\nCodex &lt;- c(first = \"one\", second = \"two\", third = \"three\", fourth = \"four\")\nx[c(1, 3)] &lt;- c(\"new1\", \"new2\", \"new3\") # BAD! Replacement length is 3, and length of subset is 2\nx\n\n first second  third fourth \n\"new1\"  \"two\" \"new2\" \"four\"",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#subsetting-matricies-and-data-frames-with",
    "href": "src/ica/10-base-r-notes.html#subsetting-matricies-and-data-frames-with",
    "title": "10 Base R",
    "section": "Subsetting Matricies and Data Frames with [\n",
    "text": "Subsetting Matricies and Data Frames with [\n\nAll of the above subsetting options can be used for subsetting matrices and data frames (named list of elements of equal length).\n\nCodem &lt;- matrix(1:12, nrow = 3, ncol = 4)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\nCodem[1:5] # Matrix = vector (down the columns) with dimensions\n\n[1] 1 2 3 4 5\n\n\nYou can use a comma to subset by rows and columns separately.\n\nCodem[1,] # Get 1st row\n\n[1]  1  4  7 10\n\nCodem[,1] # Get 1st column\n\n[1] 1 2 3\n\n\n. . .\n\nCodem[1,3] # Get 1st row and 3rd column\n\n[1] 7\n\nCodem[c(1,3),] # Get 1st and 3rd rows\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    3    6    9   12\n\nCodem[,c(1,3)] # Get 1st and 3rd columns\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    2    8\n[3,]    3    9\n\nCodem[c(1,3),c(1,3)] # Get 1st and 3rd rows and 1st and 3rd columns\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    3    9\n\nCodem[-1,] # Get all rows except 1st\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n[2,]    3    6    9   12\n\nCodem[c(TRUE, FALSE, FALSE),] # Get the 1st row via a logical\n\n[1]  1  4  7 10\n\nCode# Add row and column names to the matrix\ncolnames(m) &lt;- str_c(\"col\", 1:4)\nrownames(m) &lt;- str_c(\"row\", 1:3)\nm[\"row1\",]\n\ncol1 col2 col3 col4 \n   1    4    7   10",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#selecting-a-single-element-with-and",
    "href": "src/ica/10-base-r-notes.html#selecting-a-single-element-with-and",
    "title": "10 Base R",
    "section": "Selecting a single element with $ and [[\n",
    "text": "Selecting a single element with $ and [[\n\nWe can use $ and [[ to extract a single column of a data frame or an element within a list. This breaks out of the original class structure.\n\nCodemtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\nCodemtcars$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nCodemtcars[[\"mpg\"]]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nCodemtcars |&gt; pull(mpg)\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#exercises",
    "href": "src/ica/10-base-r-notes.html#exercises",
    "title": "10 Base R",
    "section": "Exercises",
    "text": "Exercises\n\n\nSubsetting Functions For each of the tasks below, write a function that take a vector as input returns the desired output:\n\n\nThe elements at even-numbered positions. (Hint: use the seq() function.)\nEvery element except the last value.\nOnly even values (and no missing values).",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#exploring-the-structure-of-an-object-with-str",
    "href": "src/ica/10-base-r-notes.html#exploring-the-structure-of-an-object-with-str",
    "title": "10 Base R",
    "section": "Exploring the structure of an object with str()\n",
    "text": "Exploring the structure of an object with str()\n\nThe str() function shows you the structure of an object and is useful for exploring model objects and objects created from packages that are new to you.\nIn the output of str() dollar signs indicate named components of a list that can be extracted via $ or [[.\n. . .\nWe see that both mod and mod_summ are lists, so we can also interactively view these objects with View(mod) and View(mod_summ) in the Console.\n\nCodemod &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmod_summ &lt;- summary(mod)\n\nstr(mod)\n\nList of 12\n $ coefficients : Named num [1:3] 37.2273 -0.0318 -3.8778\n  ..- attr(*, \"names\")= chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n $ residuals    : Named num [1:32] -2.572 -1.583 -2.476 0.135 0.373 ...\n  ..- attr(*, \"names\")= chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ effects      : Named num [1:32] -113.65 -26.046 -15.894 0.447 0.662 ...\n  ..- attr(*, \"names\")= chr [1:32] \"(Intercept)\" \"hp\" \"wt\" \"\" ...\n $ rank         : int 3\n $ fitted.values: Named num [1:32] 23.6 22.6 25.3 21.3 18.3 ...\n  ..- attr(*, \"names\")= chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ assign       : int [1:3] 0 1 2\n $ qr           :List of 5\n  ..$ qr   : num [1:32, 1:3] -5.657 0.177 0.177 0.177 0.177 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n  .. .. ..$ : chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n  .. ..- attr(*, \"assign\")= int [1:3] 0 1 2\n  ..$ qraux: num [1:3] 1.18 1.08 1.09\n  ..$ pivot: int [1:3] 1 2 3\n  ..$ tol  : num 1e-07\n  ..$ rank : int 3\n  ..- attr(*, \"class\")= chr \"qr\"\n $ df.residual  : int 29\n $ xlevels      : Named list()\n $ call         : language lm(formula = mpg ~ hp + wt, data = mtcars)\n $ terms        :Classes 'terms', 'formula'  language mpg ~ hp + wt\n  .. ..- attr(*, \"variables\")= language list(mpg, hp, wt)\n  .. ..- attr(*, \"factors\")= int [1:3, 1:2] 0 1 0 0 0 1\n  .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. .. ..$ : chr [1:3] \"mpg\" \"hp\" \"wt\"\n  .. .. .. ..$ : chr [1:2] \"hp\" \"wt\"\n  .. ..- attr(*, \"term.labels\")= chr [1:2] \"hp\" \"wt\"\n  .. ..- attr(*, \"order\")= int [1:2] 1 1\n  .. ..- attr(*, \"intercept\")= int 1\n  .. ..- attr(*, \"response\")= int 1\n  .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n  .. ..- attr(*, \"predvars\")= language list(mpg, hp, wt)\n  .. ..- attr(*, \"dataClasses\")= Named chr [1:3] \"numeric\" \"numeric\" \"numeric\"\n  .. .. ..- attr(*, \"names\")= chr [1:3] \"mpg\" \"hp\" \"wt\"\n $ model        :'data.frame':  32 obs. of  3 variables:\n  ..$ mpg: num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n  ..$ hp : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n  ..$ wt : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...\n  ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language mpg ~ hp + wt\n  .. .. ..- attr(*, \"variables\")= language list(mpg, hp, wt)\n  .. .. ..- attr(*, \"factors\")= int [1:3, 1:2] 0 1 0 0 0 1\n  .. .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. .. .. ..$ : chr [1:3] \"mpg\" \"hp\" \"wt\"\n  .. .. .. .. ..$ : chr [1:2] \"hp\" \"wt\"\n  .. .. ..- attr(*, \"term.labels\")= chr [1:2] \"hp\" \"wt\"\n  .. .. ..- attr(*, \"order\")= int [1:2] 1 1\n  .. .. ..- attr(*, \"intercept\")= int 1\n  .. .. ..- attr(*, \"response\")= int 1\n  .. .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n  .. .. ..- attr(*, \"predvars\")= language list(mpg, hp, wt)\n  .. .. ..- attr(*, \"dataClasses\")= Named chr [1:3] \"numeric\" \"numeric\" \"numeric\"\n  .. .. .. ..- attr(*, \"names\")= chr [1:3] \"mpg\" \"hp\" \"wt\"\n - attr(*, \"class\")= chr \"lm\"\n\nCodestr(mod_summ)\n\nList of 11\n $ call         : language lm(formula = mpg ~ hp + wt, data = mtcars)\n $ terms        :Classes 'terms', 'formula'  language mpg ~ hp + wt\n  .. ..- attr(*, \"variables\")= language list(mpg, hp, wt)\n  .. ..- attr(*, \"factors\")= int [1:3, 1:2] 0 1 0 0 0 1\n  .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. .. ..$ : chr [1:3] \"mpg\" \"hp\" \"wt\"\n  .. .. .. ..$ : chr [1:2] \"hp\" \"wt\"\n  .. ..- attr(*, \"term.labels\")= chr [1:2] \"hp\" \"wt\"\n  .. ..- attr(*, \"order\")= int [1:2] 1 1\n  .. ..- attr(*, \"intercept\")= int 1\n  .. ..- attr(*, \"response\")= int 1\n  .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n  .. ..- attr(*, \"predvars\")= language list(mpg, hp, wt)\n  .. ..- attr(*, \"dataClasses\")= Named chr [1:3] \"numeric\" \"numeric\" \"numeric\"\n  .. .. ..- attr(*, \"names\")= chr [1:3] \"mpg\" \"hp\" \"wt\"\n $ residuals    : Named num [1:32] -2.572 -1.583 -2.476 0.135 0.373 ...\n  ..- attr(*, \"names\")= chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ coefficients : num [1:3, 1:4] 37.22727 -0.03177 -3.87783 1.59879 0.00903 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n  .. ..$ : chr [1:4] \"Estimate\" \"Std. Error\" \"t value\" \"Pr(&gt;|t|)\"\n $ aliased      : Named logi [1:3] FALSE FALSE FALSE\n  ..- attr(*, \"names\")= chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n $ sigma        : num 2.59\n $ df           : int [1:3] 3 29 3\n $ r.squared    : num 0.827\n $ adj.r.squared: num 0.815\n $ fstatistic   : Named num [1:3] 69.2 2 29\n  ..- attr(*, \"names\")= chr [1:3] \"value\" \"numdf\" \"dendf\"\n $ cov.unscaled : num [1:3, 1:3] 3.80e-01 2.21e-05 -1.09e-01 2.21e-05 1.21e-05 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n  .. ..$ : chr [1:3] \"(Intercept)\" \"hp\" \"wt\"\n - attr(*, \"class\")= chr \"summary.lm\"\n\n\n\nCodeget_even_pos &lt;- function(x) {\n    if (length(x) &lt;= 1) {\n        print(\"No even positions\")\n    } else {\n        idx &lt;- seq(2, length(x), by = 2)\n        x[idx]\n    }\n}\nget_even_pos(1:10)\n\n[1]  2  4  6  8 10\n\nCodeget_even_pos(1:9)\n\n[1] 2 4 6 8\n\nCodeget_even_pos(1)\n\n[1] \"No even positions\"\n\nCodeget_all_but_last &lt;- function(x) {\n    head(x, -1)\n    # x[1:(length(x)-1)]\n}\nget_all_but_last(1:10)\n\n[1] 1 2 3 4 5 6 7 8 9\n\nCodeget_evens &lt;- function(x) {\n    x[x %% 2 == 0 & !is.na(x)]\n}\n\nget_evens(c(1, 2, 7, NA))\n\n[1] 2\n\nCodeget_evens(c(1, 2, 7, 8, NA))\n\n[1] 2 8",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#exercise",
    "href": "src/ica/10-base-r-notes.html#exercise",
    "title": "10 Base R",
    "section": "Exercise",
    "text": "Exercise\n\n\nCI Function Write a function that fits a linear model on the dataset using the given outcome and predictor variables and return a data frame (tibble) with the coefficient estimate and CI for the predictor of interest. It should take the following inputs:\n\n\n\ndata: A dataset\n\nyvar: Outcome variable to be used in a linear model (a length-1 character vector)\n\npreds: Predictor variables to be used in a linear model (a character vector)\n\npred_of_interest: The variable whose coefficient estimate and confidence interval are of interest (a length-1 character vector and should be one of preds)\n\nDevelopment tip: As you develop, it will help to create objects for the arguments so that you can see what output looks like interactively:\nTest your function on the mtcars dataset.\n\nCodedata &lt;- mtcars\nyvar &lt;- \"mpg\"\npreds &lt;- c(\"hp\", \"wt\")\npred_of_interest &lt;- \"hp\"\n\n\nWhen you’re done developing your function, remove these objects to declutter your environment by entering rm(data, yvar, preds, pred_of_interest) in the Console.\n\nCodefit_mod_and_extract &lt;- function(data, yvar, preds, pred_of_interest) {\n    # Use str_c to create a string (formula_str) that looks like \"yvar ~ pred1 + pred2\"\n    # Look at the documentation for a helpful argument\n    mod_formula_str &lt;- str_c(yvar, \"~\", str_c(preds, collapse = \"+\"))\n    mod_form &lt;- as.formula(mod_formula_str)\n    \n    # Fit a linear model using the constructed formula and given data\n    mod &lt;- lm(mod_form, data = data)\n    \n    # Obtain 95% confidence interval\n    ci &lt;- confint(mod, level = 0.95)\n    \n    # Return the coefficient estimate and CI for the predictor of interest\n    tibble(\n        which_pred = pred_of_interest,\n        estimate = mod$coefficients[pred_of_interest],\n        ci_lower = ci[pred_of_interest, \"2.5 %\"],\n        ci_upper = ci[pred_of_interest, \"97.5 %\"]\n    )\n}\n\n\nfit_mod_and_extract(data = mtcars, yvar = \"mpg\", preds = c(\"hp\", \"wt\"), pred_of_interest = \"hp\")\n\n\n\n\n\n\n## Debugging Strategies   \n\nWhen writing functions and working with functions that you wrote, you may encounter errors that are hard to figure out. \n\nHere are some strategies to help you debug the issues you encounter:\n\n- Use `print()` and `cat()` to print out intermediate results and messages within a function.\n  - Examples: `print(x)`, `cat(\"The value of x is\", x, \"\\n\")`\n\n::: {.cell}\n\n```{.r .cell-code}\nMy_own_sum &lt;- function(x){\n  print(x)\n  return(sum(x))\n}\nMy_own_sum(c(1,2,3))\n\nMy_own_sum &lt;- function(x){\n  cat(\"The value of x is\", x, \"\\n\")\n  cat(\"The class of x is\", class(x), \"\\n\")\n  return(sum(x))\n}\n\nMy_own_sum(c(1,2,3))\n:::\n\nUse browser() to pause the function at a certain point and interactively explore the environment. Press “Next” or type n to run the next line of code. Type the name of an object in the Console to see its value at this point in the function. You can type Q to quit the browser.\n\nExample below:\n\n\n\n\nCodefit_mod_and_extract &lt;- function(data, yvar, preds, pred_of_interest) {\n    # Use str_c to create a string (formula_str) that looks like \"yvar ~ pred1 + pred2\"\n    # Look at the documentation for a helpful argument\n    mod_formula_str &lt;- str_c(yvar, \"~\", str_c(preds, collapse = \"+\"))\n    mod_form &lt;- as.formula(mod_formula_str)\n    \n    # Add browser() to where in the function you'd like to pause and interact in the function environment using the Console\n    browser()\n    \n    # Fit a linear model using the constructed formula and given data\n    mod &lt;- lm(mod_form, data = data)\n    \n    # Obtain 95% confidence interval\n    ci &lt;- confint(mod, level = 0.95)\n    \n    # Return the coefficient estimate and CI for the predictor of interest\n    tibble(\n        which_pred = pred_of_interest,\n        estimate = mod$coefficients[pred_of_interest],\n        ci_lower = ci[pred_of_interest, \"2.5 %\"],\n        ci_upper = ci[pred_of_interest, \"97.5 %\"]\n    )\n}\n\n\nfit_mod_and_extract(data = mtcars, yvar = \"mpg\", preds = c(\"hp\", \"wt\"), pred_of_interest = \"hp\")\n\n\n\nUse try() to catch errors and print out a message when an error occurs.\n\nExample below:\n\n\n\n\nCodeMy_own_sum &lt;- function(x){\n  return(sum(x))\n}\n\nresults &lt;- My_own_sum(c(\"a\",\"b\",\"c\"))\n\nError in sum(x): invalid 'type' (character) of argument\n\nCodeclass(results)\n\nError: object 'results' not found\n\nCoderesults &lt;- try(My_own_sum(c(\"a\",\"b\",\"c\")), silent = TRUE)\nclass(results)\n\n[1] \"try-error\"\n\n\n\nInclude if else statements within a function to ensure that you are passing the right type of input to a function. You can create you own custom error message with stop().\n\nExample below:\n\n\n\n\nCodeMy_own_sum &lt;- function(x){\n  if(!is.numeric(x)){\n    stop(\"Input must be numeric\")\n  }\n  return(sum(x))\n}\n\nresults &lt;- My_own_sum(c(\"a\",\"b\",\"c\"))\n\nError in My_own_sum(c(\"a\", \"b\", \"c\")): Input must be numeric\n\nCodeclass(results)\n\n[1] \"try-error\"\n\nCoderesults &lt;- try(My_own_sum(c(\"a\",\"b\",\"c\")), silent = TRUE)\nclass(results)\n\n[1] \"try-error\"",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/10-base-r-notes.html#done",
    "href": "src/ica/10-base-r-notes.html#done",
    "title": "10 Base R",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>10 Base R</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html",
    "href": "src/ica/09-functions-notes.html",
    "title": "9 Functions",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#learning-goals",
    "href": "src/ica/09-functions-notes.html#learning-goals",
    "title": "9 Functions",
    "section": "",
    "text": "Recognize when it would be useful to write a function\nIdentify the core components of a function definition and explain their role (the function() directive, arguments, argument defaults, function body, return value)\nIdentify the scoping of a function in accessing objects in R\nDescribe the difference between argument matching by position and by name\nWrite if-else, if-else if-else statements to conditionally execute code\nWrite your own function to carry out a repeated task\nProvide feedback on functions written by others",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#functions-and-control-structures",
    "href": "src/ica/09-functions-notes.html#functions-and-control-structures",
    "title": "9 Functions",
    "section": "Functions and Control Structures",
    "text": "Functions and Control Structures\nWhy functions?\nGetting really good at writing useful and reusable functions is one of the best ways to increase your expertise in data science. It requires a lot of practice.\nIf you’ve copied and pasted code 3 or more times, it’s time to write a function. Try to avoid repeating yourself.\n\n\n\nReducing errors: Copy + paste + modify is prone to errors (e.g., forgetting to change a variable name)\n\nEfficiency: If you need to update code, you only need to do it one place. This allows reuse of code within and across projects.\n\nReadability: Encapsulating code within a function with a descriptive name makes code more readable.\n\n\nCore parts of a function\nWhen you define a function, what does it look like?\n\nCode# Defining a function\nfunction_name &lt;- function(input_name_1, input_name_2 = default_value_2){\n\n  # function body - code that does something\n\n  return(output)\n}\n\n# Calling a function (all valid ways)\nfunction_name(input_name_1 = 2, input_name_2 = 4)\nfunction_name(2, 4)\nfunction_name(input_name_2 = 4, input_name_1 = 2)\nfunction_name(2)\n\n\nThe core parts of defining a function include:\n\n\nfunction() directive\n\nThis is what allows tells R to create a function.\n\n\n\nArguments/Inputs: the input_name_1 and input_name_2 – these are names of the function inputs\n\n\ndefault_value_2 is a default value that is used if no input values are provided when the function is called\n\n\n\nFunction body\n\nThe code inside the curly braces { } is where all the work happens. This code uses the function arguments to perform computations.\n\n\n\nReturn value\n\nWe can explicitly return an object by putting it inside return().\n\n\n\nHere are three examples that can help us learn a few properties of functions:\n\nCodeaverage &lt;- function(x, remove_nas) {\n    return(sum(x, na.rm = remove_nas)/length(x))\n}\naverage2 &lt;- function(x, remove_nas = TRUE) {\n    return(sum(x, na.rm = remove_nas)/length(x))\n}\n\naverage3 &lt;- function(x, remove_nas) {\n    sum(x, na.rm = remove_nas)/length(x)\n}\n\n\nNote:\n\nIn average2, the remove_nas argument has a default value of TRUE.\n\nWhen a function has default values for arguments, they don’t have to be provided when you call the function if you want to use the default value. See below:\n\nCode# Does throw an error\naverage(c(1, 2, 3, NA))\n\nError in average(c(1, 2, 3, NA)): argument \"remove_nas\" is missing, with no default\n\nCodeaverage(c(1, 2, 3, NA), remove_nas = TRUE)\n\n[1] 1.5\n\nCode# Doesn't throw an error\naverage2(c(1, 2, 3, NA))\n\n[1] 1.5\n\nCodeaverage2(c(1, 2, 3, NA), remove_nas = FALSE)\n\n[1] NA\n\n\n\nIf we don’t provide a return(), the last value that gets evaluated in the function body and isn’t stored as an object is what the function returns. (This is generally the last line without an assignment operator &lt;-.)\n\n\naverage3() is one example, but this can easily lead to errors.\nWe should explicitly return an object by putting it inside return().",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#scope",
    "href": "src/ica/09-functions-notes.html#scope",
    "title": "9 Functions",
    "section": "Scope",
    "text": "Scope\nIn programming, scope refers to the area of a program where a named object is recognized and can be used.\n\nR uses lexical scoping, which means that the scope of a variable is determined by where it is created in the code.\n\nLexical scoping in R:\n\nWhen code refers to an object (e.g. data set, function, vector, etc.), R looks for the object in the current, local environment.\nIf it doesn’t find it, it continues to search by looking in the parent environment, and so on. The top-level environment is the global environment, the location where all interactive (i.e. outside of a function) computation and storage takes place.\n\nIf you save an object in R, outside a function local environment, it is stored in the global environment.\n\n\nIf R can’t find it in the global environment, it will look for it in loaded packages.\n\nWhen writing and using functions, the local environment is within the function itself.\n\nIf you define an object in the function, it won’t be accessible outside that function (unless you pass it as the output). See below:\n\n\nCodeaverage_new &lt;- function(x, remove_nas = TRUE) {\n    sum(x, na.rm = remove_nas)/length(x)\n  fun_new_thing_within_function &lt;- \"Fun times!\"\n}\naverage_new(1:3)\nfun_new_thing_within_function\n\nError: object 'fun_new_thing_within_function' not found\n\n\nScoping is important to consider if you try to refer to objects that aren’t passed as arguments.\n\nThis can be dangerous because if you re-use names of variables, it is easy to accidentally refer to a variable that is not the one you intended. See below:\n\n\nCodev &lt;- c(1,2,3)\n\naverage_new2 &lt;- function(x, remove_nas = TRUE) {\n    sum(x, na.rm = remove_nas)/length(x) + v\n}\n\n\naverage_new2(1:3)\n\n[1] 3 4 5\n\nCodev &lt;- c(4,5,6)\naverage_new2(1:3)\n\n[1] 6 7 8\n\n\nAnything created/saved/updated within a function that you want accessible outside that function needs to be passed to return(). See below:\n\nCodev &lt;- c(1,2,3)\n\naverage_new3 &lt;- function(x, remove_nas = TRUE) {\n  v &lt;- v + 10 # this is not changing v outside the function... \n  return(sum(x, na.rm = remove_nas)/length(x) )\n}\n\naverage_new3(1:3)\n\n[1] 2\n\nCodev\n\n[1] 1 2 3\n\n\nFor more about lexical scoping in R, see R Programming for Data Science",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#writing-functions",
    "href": "src/ica/09-functions-notes.html#writing-functions",
    "title": "9 Functions",
    "section": "Writing Functions",
    "text": "Writing Functions\nTips for writing functions:\n\nWrite the code for the body of the function (the task that you are wanting to repeat)\nIdentify the parts of the function that could/would change (these are the inputs)\n\nUpdate the body of the function to be in terms of the inputs\nAvoid manually typing anything that is specific to one input; use code to get that (such as unique values of a variable)\n\n\nIdentify the output you want to return\n\nPair programming exercises: There are 2 exercises for each section below.\n\nRead through the introduction of the concept and then work on the exercises together.\n\nYou’ll swap driver and navigator roles between exercises.\nRemember: The driver writes the code. The navigator oversees and provides guidance.\nFor the first exercise, the person whose birthday is coming up sooner will be the driver first. Swap role for the second exercise and continue in this manner for all exercises.\n\n\n\nRescaling function Write a function that rescales a numeric vector to be between 0 and 1. Here are some test cases with the expected output. Test out your function on the following inputs:\n\n\n\nx = 2:4. Expected output: 0.0 0.5 1.0\n\n\nx = c(-1, 0, 5). Expected output: 0.0000000 0.1666667 1.0000000\n\n\nx = -3:-1. Expected output: 0.0 0.5 1.0\n\n\n\nCoderescale &lt;- function(x) {\n  rng &lt;- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}\n\n\n\n\nPhone digits Write a function that formats a 10-digit phone number nicely as (###) ###-####. Your function should work on the following test cases: c(\"651-330-8661\", \"6516966000\", \"800 867 5309\"). It may help to refer to the stringr cheatsheet.\n\n\nCodeformat_phone &lt;- function(numbers) {\n  just_digits &lt;- str_remove_all(numbers, \"\\\\D\")\n  str_replace(\n    string = just_digits,\n    pattern = \"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\n    replacement = \"(\\\\1)-\\\\2-\\\\3\"\n  )\n}\nformat_phone(c(\"653-330-8441\",\"6516966000\",\"800 867 5309\"))\n\n[1] \"(653)-330-8441\" \"(651)-696-6000\" \"(800)-867-5309\"",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#calling-a-function",
    "href": "src/ica/09-functions-notes.html#calling-a-function",
    "title": "9 Functions",
    "section": "Calling a Function",
    "text": "Calling a Function\nWhen you supply arguments to a function, they can be matched by position and/or by name.\nWhen you call a function without argument = value inside the parentheses, you are using positional matching.\n\nCodeggplot(diamonds, aes(x = carat, y = price)) + geom_point()\n\n\nThe above works because the first argument of ggplot is data and the second is mapping. (Pull up the documentation on ggplot with ?ggplot in the Console.) So the following doesn’t work:\n\nCodeggplot(aes(x = carat, y = price), diamonds) + geom_point()\n\nError in `ggplot()`:\n! `mapping` must be created with `aes()`.\n✖ You've supplied a tibble.\n\n\nBut if we named the arguments (name matching), we would be fine:\n\nCodeggplot(mapping = aes(x = carat, y = price), data = diamonds) + geom_point()\n\n\nSomewhat confusingly, we can name some arguments and not others. Below, mapping is named, but data isn’t. This works because when an argument is matched by name, it is “removed” from the argument list, and the remaining unnamed arguments are matched in the order that they are listed in the function definition. Just because this is possible doesn’t mean it’s a good idea–don’t do this!\n\nCodeggplot(mapping = aes(x = carat, y = price), diamonds) + geom_point()\n\n\n\n\n\n\n\n\nArgument matching\n\n\n\nIn general, it is safest to match arguments by name and position for your peace of mind. For functions that you are very familiar with (and know the argument order), it’s ok to just use positional matching.\n\n\n\n\nError Messages Diagnose the error message in the example below:\n\nggplot() |&gt;\n    geom_sf(census_data, aes(fill = population))\n    \nError in `layer_sf()`:\n! `mapping` must be created by `aes()`",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#the-if-else-if-else-control-structure",
    "href": "src/ica/09-functions-notes.html#the-if-else-if-else-control-structure",
    "title": "9 Functions",
    "section": "The if-else if-else Control Structure",
    "text": "The if-else if-else Control Structure\nOften in functions, you will want to execute code chunks conditionally. In a programming language, control structures are parts of the language that allow you to control what code is executed. By far the most common is the `if-else if-else structure.\n\nCodeif (logical_condition) {\n    # some code\n} else if (other_logical_condition) {\n    # some code\n} else {\n    # some code\n}\n\nmiddle &lt;- function(x) {\n    mean_x &lt;- mean(x, na.rm = TRUE)\n    median_x &lt;- median(x, na.rm = TRUE)\n    seems_skewed &lt;- (mean_x &gt; 1.5*median_x) | (mean_x &lt; (1/1.5)*median_x)\n    if (seems_skewed) {\n        median_x\n    } else {\n        mean_x\n    }\n}\n\n\n\n\n\n\n\n\nTo vectorize or not to vectorize\n\n\n\nThe if () else {} code is not vectorized; the logical condition in if() cannot be a logical vector of length longer than 1. If you want a vectorized version of conditional execution of code use if_else() or case_when(); these can be used in mutate().\n\n\n\n\nConvert Temp Write a function for converting temperatures that takes as input a numeric value and a unit (either “C” for Celsius or “F” for Fahrenheit). The function should convert the temperature from one unit to the other based on the following formulas:\n\n\nTo convert Celsius to Fahrenheit: (Celsius * 9/5) + 32\n\nTo convert Fahrenheit to Celsius: (Fahrenheit - 32) * 5/9\n\n\n\n\nDomain Name Write a function that extracts the domain name of a supplied email address. The function should return the domain name (e.g., “gmail.com”). If the input is not a valid email address, return “Invalid Email”. (A valid email ends in “dot something”.)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#writing-functions-with-tidyverse-verbs",
    "href": "src/ica/09-functions-notes.html#writing-functions-with-tidyverse-verbs",
    "title": "9 Functions",
    "section": "Writing Functions with tidyverse Verbs",
    "text": "Writing Functions with tidyverse Verbs\nPerhaps we are using group_by() and summarize() a lot to compute group means. We might write this function:\n\nCodegroup_means &lt;- function(df, group_var, mean_var) {\n    df |&gt;\n        group_by(group_var) |&gt;\n        summarize(mean = mean(mean_var))\n}\n\n\nLet’s use it on the diamonds dataset to compute the mean size (carat) by diamond cut:\n\nCodegroup_means(diamonds, group_var = cut, mean_var = carat)\n\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `group_var` is not found.\n\n\nWhat if the problem is that the variable names need to be in quotes?\n\nCodegroup_means(diamonds, group_var = \"cut\", mean_var = \"carat\")\n\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `group_var` is not found.\n\n\nWhat’s Going On?\nThe tidyverse uses something called tidy evaluation: this allows you to refer to a variable by typing it directly (e.g., no need to put it in quotes).\n\n\ngroup_by(group_var) is expecting a variable that is actually called group_var, and mean(mean_var) is expecting a variable that is actually called mean_var.\n\nTo fix this we need to embrace the variables inside the function with { var }:\n\nCodegroup_means &lt;- function(df, group_var, mean_var) {\n    df |&gt;\n        group_by({{ group_var }}) |&gt;\n        summarize(mean = mean({{ mean_var }}))\n}\n\n\nThe { var } tells R to look at what the variable specified by the input var rather than look for a variable called var.\n\nCodegroup_means(diamonds, group_var = cut, mean_var = carat)\n\n# A tibble: 5 × 2\n  cut        mean\n  &lt;ord&gt;     &lt;dbl&gt;\n1 Fair      1.05 \n2 Good      0.849\n3 Very Good 0.806\n4 Premium   0.892\n5 Ideal     0.703\n\n\nLet’s group by both cut and color:\n\nCodegroup_means(diamonds, group_var = c(cut, color), mean_var = carat)\n\nError in `group_by()`:\nℹ In argument: `c(cut, color)`.\nCaused by error:\n! `c(cut, color)` must be size 53940 or 1, not 107880.\n\n\nOh No! What Now?!\nWhen c(cut, color) is put inside { c(cut, color) } within the function, R is actually running the code inside { }.\n\nThis combines the columns for those 2 variables into one long vector. What we really meant by c(cut, color) is “group by both cut and color”.\n\nTo fix this, we need the pick() function to get R to see { group_var } as a vector of separate variables (like the way select() works).\n\nCodegroup_means &lt;- function(df, group_var, mean_var) {\n    df |&gt;\n        group_by(pick({{ group_var }})) |&gt;\n        summarize(mean = mean({{ mean_var }}))\n}\n\n\n\n\nProp function Create a new version of dplyr::count() that also shows proportions instead of just sample sizes. The function should be able to handle counting by multiple variables. Test your function with two different sets of arguments using the diamonds dataset.\n\n\n\nScatterplot + Smooth function Create a function that creates a scatterplot from a user-supplied dataset with user-supplied x and y variables. The plot should also show a curvy smoothing line in blue, and a linear smoothing line in red. Test your function using the diamonds dataset.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/09-functions-notes.html#done",
    "href": "src/ica/09-functions-notes.html#done",
    "title": "9 Functions",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>9 Functions</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html",
    "href": "src/ica/06-wrangling-1-notes.html",
    "title": "6 Adv Data wrangling P1",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#learning-goals",
    "href": "src/ica/06-wrangling-1-notes.html#learning-goals",
    "title": "6 Adv Data wrangling P1",
    "section": "",
    "text": "Determine the class of a given object and identify concerns to be wary of when manipulating an object of that class (numerics, logicals, factors, dates, strings, data.frames)\nExplain what vector recycling is, when it can be a problem, and how to avoid those problems\nUse a variety of functions to wrangle numerical and logical data\nExtract date-time information using the lubridate package\nUse the forcats package to wrangle factor data",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#helpful-cheatsheets",
    "href": "src/ica/06-wrangling-1-notes.html#helpful-cheatsheets",
    "title": "6 Adv Data wrangling P1",
    "section": "Helpful Cheatsheets",
    "text": "Helpful Cheatsheets\nRStudio (Posit) maintains a collection of wonderful cheatsheets. The following will be helpful:\n\nData transformation with dplyr\nDates and times with lubridate\nFactors with forcats\n\nData Wrangling Verbs (from Stat/Comp 112)\n\n\nmutate(): creates/changes columns/elements in a data frame/tibble\n\nselect(): keeps subset of columns/elements in a data frame/tibble\n\nfilter(): keeps subsets of rows in a data frame/tibble\n\narrange(): sorts rows in a data frame/tibble\n\ngroup_by(): internally groups rows in data frame/tibble by values in 1 or more columsn/elements\n\nsummarize(): collapses/combines information across rows using functions such as n(), sum(), mean(), min(), max(), median(), sd()\n\n\ncount(): shortcut for group_by() |&gt; summarize(n = n())\n\n\nleft_join(): mutating join of two data frames/tibbles keeping all rows in left data frame\n\nfull_join(): mutating join of two data frames/tibbles keeping all rows in both data frames\n\ninner_join(): mutating join of two data frames/tibbles keeping rows in left data frame that find match in right\n\nsemi_join(): filtering join of two data frames/tibbles keeping rows in left data frame that find match in right\n\nanti_join(): filtering join of two data frames/tibbles keeping rows in left data frame that do not find match in right\n\npivot_wider(): rearrange values from two columns to many(one column becomes the names of new variables, one column becomes the values of the new variables)\n\npivot_longer(): rearrange values from many columns to two (the names of the columns go to one new variable, the values of the columns go to a second new variable)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#vectors",
    "href": "src/ica/06-wrangling-1-notes.html#vectors",
    "title": "6 Adv Data wrangling P1",
    "section": "Vectors",
    "text": "Vectors\nAn atomic vector is a storage container in R where all elements in the container are of the same type. The types that are relevant to data science are:\n\n\nlogical (also known as boolean)\nnumbers\n\ninteger\n\nnumeric floating point (also known as double)\n\n\n\ncharacter string\n\nDate and date-time (saved as POSIXct)\nfactor\n\nFunction documentation will refer to vectors frequently.\nSee examples below:\n\n\nggplot2::scale_x_continuous()\n\n\nbreaks: A numeric vector of positions\n\nlabels: A character vector giving labels (must be same length as breaks)\n\n\n\nshiny::sliderInput()\n\n\nvalue: The initial value of the slider […] A length one vector will create a regular slider; a length two vector will create a double-ended range slider.\n\n\n\nWhen you need a vector, you can create one manually using\n\n\nc(): the combine function\n\nOr you can create one based on available data using\n\n\ndataset |&gt; mutate(newvar = variable &gt; 5) |&gt; pull(newvar): taking one column out of a dataset\n\ndataset |&gt; pull(variable) |&gt; unique(): taking one column out of a dataset and finding unique values\n\n\nCodec(\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\")\n\n[1] \"Fair\"      \"Good\"      \"Very Good\" \"Premium\"   \"Ideal\"    \n\nCodediamonds |&gt; pull(cut) |&gt; unique()\n\n[1] Ideal     Premium   Good      Very Good Fair     \nLevels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#logicals",
    "href": "src/ica/06-wrangling-1-notes.html#logicals",
    "title": "6 Adv Data wrangling P1",
    "section": "Logicals",
    "text": "Logicals\nNotes\nWhat does a logical vector look like?\n\nCodex &lt;- c(TRUE, FALSE, NA)\nx\n\n[1]  TRUE FALSE    NA\n\nCodeclass(x)\n\n[1] \"logical\"\n\n\nYou will often create logical vectors with comparison operators: &gt;, &lt;, &lt;=, &gt;=, ==, !=.\n\nCodex &lt;- c(1, 2, 9, 12)\nx &lt; 2\n\n[1]  TRUE FALSE FALSE FALSE\n\nCodex &lt;= 2\n\n[1]  TRUE  TRUE FALSE FALSE\n\nCodex &gt; 9\n\n[1] FALSE FALSE FALSE  TRUE\n\nCodex &gt;= 9\n\n[1] FALSE FALSE  TRUE  TRUE\n\nCodex == 12\n\n[1] FALSE FALSE FALSE  TRUE\n\nCodex != 12\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\nWhen you want to check for set containment, the %in% operator is the correct way to do this (as opposed to ==).\n\nCodex &lt;- c(1, 2, 9, 4)\nx == c(1, 2, 4)\n\nWarning in x == c(1, 2, 4): longer object length is not a multiple of shorter\nobject length\n\n\n[1]  TRUE  TRUE FALSE FALSE\n\nCodex %in% c(1, 2, 4)\n\n[1]  TRUE  TRUE FALSE  TRUE\n\n\nThe Warning: longer object length is not a multiple of shorter object length is a manifestation of vector recycling.\nIn R, if two vectors are being combined or compared, the shorter one will be repeated to match the length of the longer one–even if longer object length isn’t a multiple of the shorter object length. We can see the exact recycling that happens below:\n\nCodex &lt;- c(1, 2, 9, 4)\nx == c(1, 2, 4)\n\n[1]  TRUE  TRUE FALSE FALSE\n\nCodex == c(1, 2, 4, 1) # This line demonstrates the recycling that happens on the previous line\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\nLogical vectors can also be created with functions. is.na() is one useful example:\n\nCodex &lt;- c(1, 4, 9, NA)\nx == NA\n\n[1] NA NA NA NA\n\nCodeis.na(x)\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nWe can negate a logical object with !. We can combine logical objects with & (and) and | (or).\n\nCodex &lt;- c(1, 2, 4, 9)\nx &gt; 1 & x &lt; 5\n\n[1] FALSE  TRUE  TRUE FALSE\n\nCode!(x &gt; 1 & x &lt; 5)\n\n[1]  TRUE FALSE FALSE  TRUE\n\nCodex &lt; 2 | x &gt; 8\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\nWe can summarize logical vectors with:\n\n\nany(): Are ANY of the values TRUE?\n\nall(): Are ALL of the values TRUE?\n\nsum(): How many of the values are TRUE?\n\nmean(): What fraction of the values are TRUE?\n\n\nCodex &lt;- c(1, 2, 4, 9)\nany(x == 1)\n\n[1] TRUE\n\nCodeall(x &lt; 10)\n\n[1] TRUE\n\nCodesum(x == 1)\n\n[1] 1\n\nCodemean(x == 1)\n\n[1] 0.25\n\n\nif_else() and case_when() are functions that allow you to return values depending on the value of a logical vector. You’ll explore the documentation for these in the following exercises.\n\n\n\n\n\n\nNote: ifelse() (from base R) and if_else() (from tidyverse) are different functions. We prefer if_else() for many reasons (examples below).\n\nNoisy to make sure you catch issues/bugs\nCan explicitly handle missing values\nKeeps dates as dates\n\n\nExamples\n\nCodex &lt;- c(-1, -2, 4, 9, NA)\n\nifelse(x &gt; 0, 'positive', 'negative')\n\n[1] \"negative\" \"negative\" \"positive\" \"positive\" NA        \n\nCodeif_else(x &gt; 0, 'positive', 'negative')\n\n[1] \"negative\" \"negative\" \"positive\" \"positive\" NA        \n\nCodeifelse(x &gt; 0, 1, 'negative') # Good:noisy to make sure you catch issues\n\n[1] \"negative\" \"negative\" \"1\"        \"1\"        NA        \n\nCodeif_else(x &gt; 0, 'positive', 'negative', missing = 'missing') # Good: can explicitly handle NA\n\n[1] \"negative\" \"negative\" \"positive\" \"positive\" \"missing\" \n\nCodefun_dates &lt;- mdy('1-1-2025') + 0:365\nifelse(fun_dates &lt; today(), fun_dates + years(), fun_dates) # Bad: converts dates to integers\n\n  [1] 20454 20455 20456 20457 20458 20459 20460 20461 20462 20463 20464 20465\n [13] 20466 20467 20468 20469 20470 20471 20472 20473 20474 20475 20476 20477\n [25] 20478 20479 20480 20481 20482 20483 20484 20485 20486 20487 20488 20489\n [37] 20490 20491 20492 20493 20494 20495 20496 20497 20498 20499 20500 20501\n [49] 20502 20503 20504 20505 20506 20507 20508 20509 20510 20511 20512 20513\n [61] 20514 20515 20516 20517 20518 20519 20520 20521 20522 20523 20524 20525\n [73] 20526 20527 20528 20529 20530 20531 20532 20533 20534 20535 20536 20537\n [85] 20538 20539 20540 20541 20542 20543 20544 20545 20546 20547 20548 20549\n [97] 20550 20551 20552 20553 20554 20555 20556 20557 20558 20559 20560 20561\n[109] 20562 20563 20564 20565 20566 20567 20568 20569 20570 20571 20572 20573\n[121] 20574 20575 20576 20577 20578 20579 20580 20581 20582 20583 20584 20585\n[133] 20586 20587 20588 20589 20590 20591 20592 20593 20594 20595 20596 20597\n[145] 20598 20599 20600 20601 20602 20603 20604 20605 20606 20607 20608 20609\n[157] 20610 20611 20612 20613 20614 20615 20616 20617 20618 20619 20620 20621\n[169] 20622 20623 20624 20625 20626 20627 20628 20629 20630 20631 20632 20633\n[181] 20634 20635 20636 20637 20638 20639 20640 20641 20642 20643 20644 20645\n[193] 20646 20647 20648 20649 20650 20651 20652 20653 20654 20655 20656 20657\n[205] 20658 20659 20660 20661 20662 20663 20664 20665 20666 20667 20668 20669\n[217] 20670 20671 20672 20673 20674 20675 20676 20677 20678 20679 20680 20681\n[229] 20682 20683 20684 20685 20686 20687 20688 20689 20690 20691 20692 20693\n[241] 20694 20695 20696 20697 20698 20699 20700 20701 20702 20703 20704 20705\n[253] 20706 20707 20708 20709 20710 20711 20712 20713 20714 20715 20716 20717\n[265] 20718 20719 20720 20721 20722 20723 20724 20725 20726 20727 20728 20729\n[277] 20730 20731 20732 20733 20369 20370 20371 20372 20373 20374 20375 20376\n[289] 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 20388\n[301] 20389 20390 20391 20392 20393 20394 20395 20396 20397 20398 20399 20400\n[313] 20401 20402 20403 20404 20405 20406 20407 20408 20409 20410 20411 20412\n[325] 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 20423 20424\n[337] 20425 20426 20427 20428 20429 20430 20431 20432 20433 20434 20435 20436\n[349] 20437 20438 20439 20440 20441 20442 20443 20444 20445 20446 20447 20448\n[361] 20449 20450 20451 20452 20453 20454\n\nCodeif_else(fun_dates &lt; today(), fun_dates + years(), fun_dates) # Good: keeps dates as dates\n\n  [1] \"2026-01-01\" \"2026-01-02\" \"2026-01-03\" \"2026-01-04\" \"2026-01-05\"\n  [6] \"2026-01-06\" \"2026-01-07\" \"2026-01-08\" \"2026-01-09\" \"2026-01-10\"\n [11] \"2026-01-11\" \"2026-01-12\" \"2026-01-13\" \"2026-01-14\" \"2026-01-15\"\n [16] \"2026-01-16\" \"2026-01-17\" \"2026-01-18\" \"2026-01-19\" \"2026-01-20\"\n [21] \"2026-01-21\" \"2026-01-22\" \"2026-01-23\" \"2026-01-24\" \"2026-01-25\"\n [26] \"2026-01-26\" \"2026-01-27\" \"2026-01-28\" \"2026-01-29\" \"2026-01-30\"\n [31] \"2026-01-31\" \"2026-02-01\" \"2026-02-02\" \"2026-02-03\" \"2026-02-04\"\n [36] \"2026-02-05\" \"2026-02-06\" \"2026-02-07\" \"2026-02-08\" \"2026-02-09\"\n [41] \"2026-02-10\" \"2026-02-11\" \"2026-02-12\" \"2026-02-13\" \"2026-02-14\"\n [46] \"2026-02-15\" \"2026-02-16\" \"2026-02-17\" \"2026-02-18\" \"2026-02-19\"\n [51] \"2026-02-20\" \"2026-02-21\" \"2026-02-22\" \"2026-02-23\" \"2026-02-24\"\n [56] \"2026-02-25\" \"2026-02-26\" \"2026-02-27\" \"2026-02-28\" \"2026-03-01\"\n [61] \"2026-03-02\" \"2026-03-03\" \"2026-03-04\" \"2026-03-05\" \"2026-03-06\"\n [66] \"2026-03-07\" \"2026-03-08\" \"2026-03-09\" \"2026-03-10\" \"2026-03-11\"\n [71] \"2026-03-12\" \"2026-03-13\" \"2026-03-14\" \"2026-03-15\" \"2026-03-16\"\n [76] \"2026-03-17\" \"2026-03-18\" \"2026-03-19\" \"2026-03-20\" \"2026-03-21\"\n [81] \"2026-03-22\" \"2026-03-23\" \"2026-03-24\" \"2026-03-25\" \"2026-03-26\"\n [86] \"2026-03-27\" \"2026-03-28\" \"2026-03-29\" \"2026-03-30\" \"2026-03-31\"\n [91] \"2026-04-01\" \"2026-04-02\" \"2026-04-03\" \"2026-04-04\" \"2026-04-05\"\n [96] \"2026-04-06\" \"2026-04-07\" \"2026-04-08\" \"2026-04-09\" \"2026-04-10\"\n[101] \"2026-04-11\" \"2026-04-12\" \"2026-04-13\" \"2026-04-14\" \"2026-04-15\"\n[106] \"2026-04-16\" \"2026-04-17\" \"2026-04-18\" \"2026-04-19\" \"2026-04-20\"\n[111] \"2026-04-21\" \"2026-04-22\" \"2026-04-23\" \"2026-04-24\" \"2026-04-25\"\n[116] \"2026-04-26\" \"2026-04-27\" \"2026-04-28\" \"2026-04-29\" \"2026-04-30\"\n[121] \"2026-05-01\" \"2026-05-02\" \"2026-05-03\" \"2026-05-04\" \"2026-05-05\"\n[126] \"2026-05-06\" \"2026-05-07\" \"2026-05-08\" \"2026-05-09\" \"2026-05-10\"\n[131] \"2026-05-11\" \"2026-05-12\" \"2026-05-13\" \"2026-05-14\" \"2026-05-15\"\n[136] \"2026-05-16\" \"2026-05-17\" \"2026-05-18\" \"2026-05-19\" \"2026-05-20\"\n[141] \"2026-05-21\" \"2026-05-22\" \"2026-05-23\" \"2026-05-24\" \"2026-05-25\"\n[146] \"2026-05-26\" \"2026-05-27\" \"2026-05-28\" \"2026-05-29\" \"2026-05-30\"\n[151] \"2026-05-31\" \"2026-06-01\" \"2026-06-02\" \"2026-06-03\" \"2026-06-04\"\n[156] \"2026-06-05\" \"2026-06-06\" \"2026-06-07\" \"2026-06-08\" \"2026-06-09\"\n[161] \"2026-06-10\" \"2026-06-11\" \"2026-06-12\" \"2026-06-13\" \"2026-06-14\"\n[166] \"2026-06-15\" \"2026-06-16\" \"2026-06-17\" \"2026-06-18\" \"2026-06-19\"\n[171] \"2026-06-20\" \"2026-06-21\" \"2026-06-22\" \"2026-06-23\" \"2026-06-24\"\n[176] \"2026-06-25\" \"2026-06-26\" \"2026-06-27\" \"2026-06-28\" \"2026-06-29\"\n[181] \"2026-06-30\" \"2026-07-01\" \"2026-07-02\" \"2026-07-03\" \"2026-07-04\"\n[186] \"2026-07-05\" \"2026-07-06\" \"2026-07-07\" \"2026-07-08\" \"2026-07-09\"\n[191] \"2026-07-10\" \"2026-07-11\" \"2026-07-12\" \"2026-07-13\" \"2026-07-14\"\n[196] \"2026-07-15\" \"2026-07-16\" \"2026-07-17\" \"2026-07-18\" \"2026-07-19\"\n[201] \"2026-07-20\" \"2026-07-21\" \"2026-07-22\" \"2026-07-23\" \"2026-07-24\"\n[206] \"2026-07-25\" \"2026-07-26\" \"2026-07-27\" \"2026-07-28\" \"2026-07-29\"\n[211] \"2026-07-30\" \"2026-07-31\" \"2026-08-01\" \"2026-08-02\" \"2026-08-03\"\n[216] \"2026-08-04\" \"2026-08-05\" \"2026-08-06\" \"2026-08-07\" \"2026-08-08\"\n[221] \"2026-08-09\" \"2026-08-10\" \"2026-08-11\" \"2026-08-12\" \"2026-08-13\"\n[226] \"2026-08-14\" \"2026-08-15\" \"2026-08-16\" \"2026-08-17\" \"2026-08-18\"\n[231] \"2026-08-19\" \"2026-08-20\" \"2026-08-21\" \"2026-08-22\" \"2026-08-23\"\n[236] \"2026-08-24\" \"2026-08-25\" \"2026-08-26\" \"2026-08-27\" \"2026-08-28\"\n[241] \"2026-08-29\" \"2026-08-30\" \"2026-08-31\" \"2026-09-01\" \"2026-09-02\"\n[246] \"2026-09-03\" \"2026-09-04\" \"2026-09-05\" \"2026-09-06\" \"2026-09-07\"\n[251] \"2026-09-08\" \"2026-09-09\" \"2026-09-10\" \"2026-09-11\" \"2026-09-12\"\n[256] \"2026-09-13\" \"2026-09-14\" \"2026-09-15\" \"2026-09-16\" \"2026-09-17\"\n[261] \"2026-09-18\" \"2026-09-19\" \"2026-09-20\" \"2026-09-21\" \"2026-09-22\"\n[266] \"2026-09-23\" \"2026-09-24\" \"2026-09-25\" \"2026-09-26\" \"2026-09-27\"\n[271] \"2026-09-28\" \"2026-09-29\" \"2026-09-30\" \"2026-10-01\" \"2026-10-02\"\n[276] \"2026-10-03\" \"2026-10-04\" \"2026-10-05\" \"2026-10-06\" \"2026-10-07\"\n[281] \"2025-10-08\" \"2025-10-09\" \"2025-10-10\" \"2025-10-11\" \"2025-10-12\"\n[286] \"2025-10-13\" \"2025-10-14\" \"2025-10-15\" \"2025-10-16\" \"2025-10-17\"\n[291] \"2025-10-18\" \"2025-10-19\" \"2025-10-20\" \"2025-10-21\" \"2025-10-22\"\n[296] \"2025-10-23\" \"2025-10-24\" \"2025-10-25\" \"2025-10-26\" \"2025-10-27\"\n[301] \"2025-10-28\" \"2025-10-29\" \"2025-10-30\" \"2025-10-31\" \"2025-11-01\"\n[306] \"2025-11-02\" \"2025-11-03\" \"2025-11-04\" \"2025-11-05\" \"2025-11-06\"\n[311] \"2025-11-07\" \"2025-11-08\" \"2025-11-09\" \"2025-11-10\" \"2025-11-11\"\n[316] \"2025-11-12\" \"2025-11-13\" \"2025-11-14\" \"2025-11-15\" \"2025-11-16\"\n[321] \"2025-11-17\" \"2025-11-18\" \"2025-11-19\" \"2025-11-20\" \"2025-11-21\"\n[326] \"2025-11-22\" \"2025-11-23\" \"2025-11-24\" \"2025-11-25\" \"2025-11-26\"\n[331] \"2025-11-27\" \"2025-11-28\" \"2025-11-29\" \"2025-11-30\" \"2025-12-01\"\n[336] \"2025-12-02\" \"2025-12-03\" \"2025-12-04\" \"2025-12-05\" \"2025-12-06\"\n[341] \"2025-12-07\" \"2025-12-08\" \"2025-12-09\" \"2025-12-10\" \"2025-12-11\"\n[346] \"2025-12-12\" \"2025-12-13\" \"2025-12-14\" \"2025-12-15\" \"2025-12-16\"\n[351] \"2025-12-17\" \"2025-12-18\" \"2025-12-19\" \"2025-12-20\" \"2025-12-21\"\n[356] \"2025-12-22\" \"2025-12-23\" \"2025-12-24\" \"2025-12-25\" \"2025-12-26\"\n[361] \"2025-12-27\" \"2025-12-28\" \"2025-12-29\" \"2025-12-30\" \"2025-12-31\"\n[366] \"2026-01-01\"\n\n\n\n\n\n\nExercises\nLoad the diamonds dataset, and filter to the first 1000 diamonds.\n\nCodedata(diamonds)\ndiamonds &lt;- diamonds |&gt; \n    slice_head(n = 1000)\n\n\nUsing tidyverse functions, complete the following:\n\nSubset to diamonds that are less than 400 dollars or more than 10000 dollars.\nSubset to diamonds that are between 500 and 600 dollars (inclusive).\nHow many diamonds are of either Fair, Premium, or Ideal cut (a total count)? What fraction of diamonds are of Fair, Premium, or Ideal cut?\n\nFirst, do this a wrong way with ==. Predict the warning message that you will receive.\nSecond, do this the correct way with an appropriate logical operator.\n\n\nAre there any diamonds of Fair cut that are more than $3000? Are all diamonds of Ideal cut more than $2000?\nCreate two new categorized versions of price by looking up the documentation for if_else() and case_when():\n\n\nprice_cat1: “low” if price is less than 500 and “high” otherwise\n\nprice_cat2: “low” if price is less than 500, “medium” if price is between 500 and 1000 dollars inclusive, and “high” otherwise.\n\n\n\n\nCode#1\ndiamonds%&gt;%\nfilter(price&lt;400|1000&gt;price)\n\n# A tibble: 150 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 140 more rows\n\nCode#2\ndiamonds%&gt;%\nfilter(price&gt;500 & price&lt;600)\n\n# A tibble: 90 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.35 Ideal     I     VS1      60.9  57     552  4.54  4.59  2.78\n 2  0.3  Premium   D     SI1      62.6  59     552  4.23  4.27  2.66\n 3  0.3  Ideal     D     SI1      62.5  57     552  4.29  4.32  2.69\n 4  0.3  Ideal     D     SI1      62.1  56     552  4.3   4.33  2.68\n 5  0.42 Premium   I     SI2      61.5  59     552  4.78  4.84  2.96\n 6  0.28 Ideal     G     VVS2     61.4  56     553  4.19  4.22  2.58\n 7  0.32 Ideal     I     VVS1     62    55.3   553  4.39  4.42  2.73\n 8  0.31 Very Good G     SI1      63.3  57     553  4.33  4.3   2.73\n 9  0.31 Premium   G     SI1      61.8  58     553  4.35  4.32  2.68\n10  0.24 Premium   E     VVS1     60.7  58     553  4.01  4.03  2.44\n# ℹ 80 more rows\n\nCode#3\nGood_Diamonds&lt;-diamonds %&gt;%\n  filter(cut %in% c('Ideal', 'Fair', 'Premium'))\n#4\nGood_Diamonds%&gt;%\n  filter(cut=='Fair' & price&gt;3000)\n\n# A tibble: 0 × 10\n# ℹ 10 variables: carat &lt;dbl&gt;, cut &lt;ord&gt;, color &lt;ord&gt;, clarity &lt;ord&gt;,\n#   depth &lt;dbl&gt;, table &lt;dbl&gt;, price &lt;int&gt;, x &lt;dbl&gt;, y &lt;dbl&gt;, z &lt;dbl&gt;\n\nCode\"yes\"\n\n[1] \"yes\"\n\nCodeGood_Diamonds%&gt;%\n  filter(cut=='Ideal' & price&lt;2000)\n\n# A tibble: 47 × 10\n   carat cut   color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.23 Ideal J     VS1      62.8    56   340  3.93  3.9   2.46\n 3  0.31 Ideal J     SI2      62.2    54   344  4.35  4.37  2.71\n 4  0.3  Ideal I     SI2      62      54   348  4.31  4.34  2.68\n 5  0.33 Ideal I     SI2      61.8    55   403  4.49  4.51  2.78\n 6  0.33 Ideal I     SI2      61.2    56   403  4.49  4.5   2.75\n 7  0.33 Ideal J     SI1      61.1    56   403  4.49  4.55  2.76\n 8  0.23 Ideal G     VS1      61.9    54   404  3.93  3.95  2.44\n 9  0.32 Ideal I     SI1      60.9    55   404  4.45  4.48  2.72\n10  0.3  Ideal I     SI2      61      59   405  4.3   4.33  2.63\n# ℹ 37 more rows\n\nCode\"No\"\n\n[1] \"No\"\n\nCode#5\n\ndiamonds %&gt;%\n  mutate(price_cat1 = ifelse(price &gt; 500, 'high', 'low'))\n\n# A tibble: 1,000 × 11\n   carat cut       color clarity depth table price     x     y     z price_cat1\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 low       \n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 low       \n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 low       \n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 low       \n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 low       \n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 low       \n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 low       \n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 low       \n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 low       \n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 low       \n# ℹ 990 more rows\n\nCodediamonds%&gt;%\n\n  mutate(price_cat2 = case_when(\n    price &lt; 500~ \"low\",\n    price &gt;= 500 & price &lt; 1000 ~ \"medium\",\n    TRUE~ \"high\"\n  ))\n\n# A tibble: 1,000 × 11\n   carat cut       color clarity depth table price     x     y     z price_cat2\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 low       \n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 low       \n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 low       \n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 low       \n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 low       \n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 low       \n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 low       \n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 low       \n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 low       \n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 low       \n# ℹ 990 more rows",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#numerics",
    "href": "src/ica/06-wrangling-1-notes.html#numerics",
    "title": "6 Adv Data wrangling P1",
    "section": "Numerics",
    "text": "Numerics\nNotes\nNumerical data can be of class integer or numeric (representing real numbers).\n\nCodex &lt;- 1:3\nx\n\n[1] 1 2 3\n\nCodeclass(x)\n\n[1] \"integer\"\n\nCodex &lt;- c(1+1e-9, 2, 3)\nx\n\n[1] 1 2 3\n\nCodeclass(x)\n\n[1] \"numeric\"\n\n\nThe Numbers chapter in R4DS covers the following functions that are all useful for wrangling numeric data:\n\n\nn(), n_distinct(): Counting and counting the number of unique values\n\nsum(is.na()): Counting the number of missing values\n\nmin(), max()\n\n\npmin(), pmax(): Get the min and max across several vectors\nInteger division: %/%. Remainder: %%\n\n\n121 %/% 100 = 1 and 121 %% 100 = 21\n\n\n\n\nround(), floor(), ceiling(): Rounding functions (to a specified number of decimal places, to the largest integer below a number, to the smallest integer above a number)\n\ncut(): Cut a numerical vector into categories\n\ncumsum(), cummean(), cummin(), cummax(): Cumulative functions\n\nrank(): Provide the ranks of the numbers in a vector\n\nlead(), lag(): shift a vector by padding with NAs\nNumerical summaries: mean, median, min, max, quantile, sd, IQR\n\nNote that all numerical summary functions have an na.rm argument that should be set to TRUE if you have missing data.\n\n\nExercises\nExercises will be on HW4.\nThe best way to add these functions and operators to your vocabulary is to need to recall them. Refer to the list of functions above as you try the exercises.\nYou will need to reference function documentation to look at arguments and look in the Examples section.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#dates",
    "href": "src/ica/06-wrangling-1-notes.html#dates",
    "title": "6 Adv Data wrangling P1",
    "section": "Dates",
    "text": "Dates\nNotes\nThe lubridate package contains useful functions for working with dates and times. The lubridate function reference is a useful resource for finding the functions you need. We’ll take a brief tour of this reference page.\nWe’ll use the lakers dataset in the lubridate package to illustrate some examples.\n\nCodelakers &lt;- as_tibble(lakers)\nhead(lakers)\n\n# A tibble: 6 × 13\n     date opponent game_type time  period etype team  player result points type \n    &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;\n1  2.01e7 POR      home      12:00      1 jump… OFF   \"\"     \"\"          0 \"\"   \n2  2.01e7 POR      home      11:39      1 shot  LAL   \"Pau … \"miss…      0 \"hoo…\n3  2.01e7 POR      home      11:37      1 rebo… LAL   \"Vlad… \"\"          0 \"off\"\n4  2.01e7 POR      home      11:25      1 shot  LAL   \"Dere… \"miss…      0 \"lay…\n5  2.01e7 POR      home      11:23      1 rebo… LAL   \"Pau … \"\"          0 \"off\"\n6  2.01e7 POR      home      11:22      1 shot  LAL   \"Pau … \"made\"      2 \"hoo…\n# ℹ 2 more variables: x &lt;int&gt;, y &lt;int&gt;\n\n\nBelow we use date-time parsing functions to represent the date and time variables with date-time classes:\n\nCodelakers &lt;- lakers |&gt;\n    mutate(\n        date = ymd(date),\n        time = ms(time)\n    )\n\n\nBelow we use extraction functions to get components of the date-time objects:\n\nCodelakers_clean &lt;- lakers |&gt;\n    mutate(\n        year = year(date),\n        month = month(date),\n        day = day(date),\n        day_of_week = wday(date, label = TRUE),\n        minute = minute(time),\n        second = second(time)\n    )\nlakers_clean |&gt; select(year:second)\n\n# A tibble: 34,624 × 6\n    year month   day day_of_week minute second\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;ord&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n 1  2008    10    28 Tue             12      0\n 2  2008    10    28 Tue             11     39\n 3  2008    10    28 Tue             11     37\n 4  2008    10    28 Tue             11     25\n 5  2008    10    28 Tue             11     23\n 6  2008    10    28 Tue             11     22\n 7  2008    10    28 Tue             11     22\n 8  2008    10    28 Tue             11     22\n 9  2008    10    28 Tue             11      0\n10  2008    10    28 Tue             10     53\n# ℹ 34,614 more rows\n\nCodelakers_clean &lt;- lakers_clean |&gt;\n    group_by(date, opponent, period) |&gt;\n    arrange(date, opponent, period, desc(time)) |&gt;\n    mutate(\n        diff_btw_plays_sec = as.numeric(time - lag(time, 1))\n    )\nlakers_clean |&gt; select(date, opponent, time, period, diff_btw_plays_sec)\n\n# A tibble: 34,624 × 5\n# Groups:   date, opponent, period [314]\n   date       opponent time     period diff_btw_plays_sec\n   &lt;date&gt;     &lt;chr&gt;    &lt;Period&gt;  &lt;int&gt;              &lt;dbl&gt;\n 1 2008-10-28 POR      12M 0S        1                 NA\n 2 2008-10-28 POR      11M 39S       1                -21\n 3 2008-10-28 POR      11M 37S       1                 -2\n 4 2008-10-28 POR      11M 25S       1                -12\n 5 2008-10-28 POR      11M 23S       1                 -2\n 6 2008-10-28 POR      11M 22S       1                 -1\n 7 2008-10-28 POR      11M 22S       1                  0\n 8 2008-10-28 POR      11M 22S       1                  0\n 9 2008-10-28 POR      11M 0S        1                -22\n10 2008-10-28 POR      10M 53S       1                 -7\n# ℹ 34,614 more rows\n\n\nExercises\nExercises will be on HW4.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#factors",
    "href": "src/ica/06-wrangling-1-notes.html#factors",
    "title": "6 Adv Data wrangling P1",
    "section": "Factors",
    "text": "Factors\nNotes\nCreating factors\nIn R, factors are made up of two components: the actual values of the data and the possible levels within the factor. Creating a factor requires supplying both pieces of information.\n\nCodemonths &lt;- c(\"Mar\", \"Dec\", \"Jan\",  \"Apr\", \"Jul\")\n\n\nHowever, if we were to sort this vector, R would sort this vector alphabetically.\n\nCode# alphabetical sort\nsort(months)\n\n[1] \"Apr\" \"Dec\" \"Jan\" \"Jul\" \"Mar\"\n\n\nWe can fix this sorting by creating a factor version of months. The levels argument is a character vector that specifies the unique values that the factor can take. The order of the values in levels defines the sorting of the factor.\n\nCodemonths_fct &lt;- factor(months, levels = month.abb) # month.abb is a built-in variable\nmonths_fct\n\n[1] Mar Dec Jan Apr Jul\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nCodesort(months_fct)\n\n[1] Jan Mar Apr Jul Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nWhat if we try to create a factor with values that aren’t in the levels? (e.g., a typo in a month name)\n\nCodemonths2 &lt;- c(\"Jna\", \"Mar\")\nfactor(months2, levels = month.abb)\n\n[1] &lt;NA&gt; Mar \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nBecause the NA is introduced silently (without any error or warnings), this can be dangerous. It might be better to use the fct() function in the forcats package instead:\n\nCodefct(months2, levels = month.abb)\n\nError in `fct()`:\n! All values of `x` must appear in `levels` or `na`\nℹ Missing level: \"Jna\"\n\n\nReordering factors\nWe’ll use a subset of the General Social Survey (GSS) dataset available in the forcats pacakges.\n\nCodedata(gss_cat)\nhead(gss_cat)\n\n# A tibble: 6 × 9\n   year marital         age race  rincome        partyid     relig denom tvhours\n  &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;       &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n1  2000 Never married    26 White $8000 to 9999  Ind,near r… Prot… Sout…      12\n2  2000 Divorced         48 White $8000 to 9999  Not str re… Prot… Bapt…      NA\n3  2000 Widowed          67 White Not applicable Independent Prot… No d…       2\n4  2000 Never married    39 White Not applicable Ind,near r… Orth… Not …       4\n5  2000 Divorced         25 White Not applicable Not str de… None  Not …       1\n6  2000 Married          25 White $20000 - 24999 Strong dem… Prot… Sout…      NA\n\n\nReordering the levels of a factor can be useful in plotting when categories would benefit from being sorted in a particular way:\n\nCoderelig_summary &lt;- gss_cat |&gt;\n    group_by(relig) |&gt;\n    summarize(\n        tvhours = mean(tvhours, na.rm = TRUE),\n        n = n()\n    )\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + \n    geom_point() +\n    theme_classic()\n\n\n\n\n\n\n\nWe can use fct_reorder() in forcats.\n\nThe first argument is the factor that you want to reorder the levels of\nThe second argument determines how the factor is sorted (analogous to what you put inside arrange() when sorting the rows of a data frame.)\n\n\nCodeggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +\n    geom_point() +\n    theme_classic()\n\n\n\n\n\n\n\nFor bar plots, we can use fct_infreq() to reorder levels from most to least common. This can be combined with fct_rev() to reverse the order (least to most common):\n\nCodegss_cat |&gt;\n    ggplot(aes(x = marital)) +\n    geom_bar() +\n    theme_classic()\n\n\n\n\n\n\nCodegss_cat |&gt;\n    mutate(marital = marital |&gt; fct_infreq() |&gt; fct_rev()) |&gt;\n    ggplot(aes(x = marital)) +\n    geom_bar() +\n    theme_classic()\n\n\n\n\n\n\n\nModifying factor levels\nWe talked about reordering the levels of a factor–what about changing the values of the levels themselves?\nFor example, the names of the political parties in the GSS could use elaboration (“str” isn’t a great label for “strong”) and clean up:\n\nCodegss_cat |&gt; count(partyid)\n\n# A tibble: 10 × 2\n   partyid                n\n   &lt;fct&gt;              &lt;int&gt;\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n\n\nWe can use fct_recode() on partyid with the new level names going on the left and the old levels on the right. Any levels that aren’t mentioned explicitly (i.e., “Don’t know” and “Other party”) will be left as is:\n\nCodegss_cat |&gt;\n    mutate(\n        partyid = fct_recode(partyid,\n            \"Republican, strong\"    = \"Strong republican\",\n            \"Republican, weak\"      = \"Not str republican\",\n            \"Independent, near rep\" = \"Ind,near rep\",\n            \"Independent, near dem\" = \"Ind,near dem\",\n            \"Democrat, weak\"        = \"Not str democrat\",\n            \"Democrat, strong\"      = \"Strong democrat\"\n        )\n    ) |&gt;\n    count(partyid)\n\n# A tibble: 10 × 2\n   partyid                   n\n   &lt;fct&gt;                 &lt;int&gt;\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490\n\n\nTo combine groups, we can assign multiple old levels to the same new level (“Other” maps to “No answer”, “Don’t know”, and “Other party”):\n\nCodegss_cat |&gt;\n    mutate(\n        partyid = fct_recode(partyid,\n            \"Republican, strong\"    = \"Strong republican\",\n            \"Republican, weak\"      = \"Not str republican\",\n            \"Independent, near rep\" = \"Ind,near rep\",\n            \"Independent, near dem\" = \"Ind,near dem\",\n            \"Democrat, weak\"        = \"Not str democrat\",\n            \"Democrat, strong\"      = \"Strong democrat\",\n            \"Other\"                 = \"No answer\",\n            \"Other\"                 = \"Don't know\",\n            \"Other\"                 = \"Other party\"\n        )\n    )\n\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n 1  2000 Never married    26 White $8000 to 9999  Independe… Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Republica… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Independe… Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Democrat,… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Democrat,… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Republica… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Independe… Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Democrat,… Prot… Other       0\n10  2000 Married          47 White $25000 or more Republica… Prot… Sout…       3\n# ℹ 21,473 more rows\n\n\nWe can use fct_collapse() to collapse many levels:\n\nCodegss_cat |&gt;\n    mutate(\n        partyid = fct_collapse(partyid,\n            \"Other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n            \"Republican\" = c(\"Strong republican\", \"Not str republican\"),\n            \"Independent\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n            \"Democrat\" = c(\"Not str democrat\", \"Strong democrat\")\n        )\n    ) |&gt;\n    count(partyid)\n\n# A tibble: 4 × 2\n  partyid         n\n  &lt;fct&gt;       &lt;int&gt;\n1 Other         548\n2 Republican   5346\n3 Independent  8409\n4 Democrat     7180\n\n\nExercises\n\nCreate a factor version of the following data with the levels in a sensible order.\n\n\nCoderatings &lt;- c(\"High\", \"Medium\", \"Low\")\n\n\nMore exercises will be on HW4.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/06-wrangling-1-notes.html#done",
    "href": "src/ica/06-wrangling-1-notes.html#done",
    "title": "6 Adv Data wrangling P1",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>6 Adv Data wrangling P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html",
    "href": "src/ica/04-adv-maps-1-notes.html",
    "title": "4 Adv Spatial Viz P1",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#learning-goals",
    "href": "src/ica/04-adv-maps-1-notes.html#learning-goals",
    "title": "4 Adv Spatial Viz P1",
    "section": "",
    "text": "Understand the basics of a CRS (coordinate reference system)\nUnderstand and recognize different spatial file types and data types in R\nImplement some of the basic plotting with the sf package\nUnderstand foundation ideas in working with spatial data (aggregating spatial point data to a spatial region, joining spatial data sets)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#additional-resources",
    "href": "src/ica/04-adv-maps-1-notes.html#additional-resources",
    "title": "4 Adv Spatial Viz P1",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nSpatial Data Science with Applications in R book: web\n\nSpatial Data Science with R and terra Resources: web\n\nLeaflet in R Package: web\n\nCRAN task view on spatial analysis: web",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#setup",
    "href": "src/ica/04-adv-maps-1-notes.html#setup",
    "title": "4 Adv Spatial Viz P1",
    "section": "Setup",
    "text": "Setup\nFor this activity, create the following directory structure in your portfolio repository under src/ica folder:\nportfolio\n└─ src\n   └─ ica\n      └─ 04_adv_maps\n         ├─ code\n         │  └─ 04-adv-maps-1-notes.qmd\n         ├─ data\n         │  └─ ...  ← saving data here during this activity\n         └─ figures\n            └─ ...  ← saving created maps here during this activity\nFirst load required packages.\n\nCode#Install these packages first\n\n# install.packages(c(\"sf\",\"elevatr\",\"terra\",\"stars\",\"tidycensus\"))\n# install.packages('devtools')\n# devtools::install_github(\"ropensci/USAboundaries\")\n# install.packages(\"USAboundariesData\", repos = \"https://ropensci.r-universe.dev\", type = \"source\")\n\n\nlibrary(tidyverse)\nlibrary(sf) # tools for working with spatial vector data (GIS functionality, mapping)\nlibrary(elevatr) # access to raster elevation maps\nlibrary(terra)\nlibrary(stars)\nlibrary(tidycensus) # spatial data for the US with census information\nlibrary(USAboundaries) # access to boundaries for US states, counties, zip codes, and congressional districts",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#spatial-data-in-r",
    "href": "src/ica/04-adv-maps-1-notes.html#spatial-data-in-r",
    "title": "4 Adv Spatial Viz P1",
    "section": "Spatial Data in R",
    "text": "Spatial Data in R\nSee Spatial Data Appendix for basics of CRS and spatial data types.\nDownload Shapefiles\n\nNavigate to the following URLs to download the spatial data files we’ll be using in this activity. Put these files in the data folder of your 04_adv_maps folder.\n\n\nMN cities: https://gisdata.mn.gov/dataset/loc-pop-centers\n\nFile type: shapefile (.shp)\nFile name: shp_loc_pop_centers.zip (Unzip this after downloading.)\n\n\nMN water: https://gisdata.mn.gov/dataset/us-mn-state-metc-water-lakes-rivers\n\nFile type: shapefile (.shp)\nFile name: shp_water_lakes_rivers.zip (Unzip this after downloading.)\n\n\nRead in Files\n\nRead in the MN cities and MN water shapefiles by entering the correct relative paths in st_read(). Tab completion will be very helpful here: type part of a directory or file name and hit tab to autocomplete or bring up a dropdown of options.\n\n\n\nCode# Use the tilde (~) for the home directory and correct the spelling of \"Documents\"\nmn_cities &lt;- sf::st_read(\"~/Documents/GitHub/portfolio-my-name-arch/src/ica/metadata/city_and_township_population_centers.shp\")\n\nReading layer `city_and_township_population_centers' from data source \n  `/Users/Dooley/Documents/GitHub/portfolio-my-name-arch/src/ica/metadata/city_and_township_population_centers.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1081 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 190832.6 ymin: 4816672 xmax: 747463.4 ymax: 5468045\nProjected CRS: NAD83 / UTM zone 15N\n\nCodemn_water &lt;- sf::st_read(\"~/Documents/GitHub/portfolio-my-name-arch/src/ica/metadata/LakesAndRivers.shp\")\n\nReading layer `LakesAndRivers' from data source \n  `/Users/Dooley/Documents/GitHub/portfolio-my-name-arch/src/ica/metadata/LakesAndRivers.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2313 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 419538.6 ymin: 4922700 xmax: 522665 ymax: 5029945\nProjected CRS: NAD83 / UTM zone 15N\n\n\nThe sf package reads in spatial data in data.frame-like format. Using the class() function we can check the class (type) of object that we just read in. Note the presence of the “sf” and “data.frame” classes:\n\nCode# The sf package comes with a North Carolina shapefile:\nnc &lt;- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n\nCodeclass(nc)\n\n[1] \"sf\"         \"data.frame\"\n\nCodeclass(mn_cities)\n\n[1] \"sf\"         \"data.frame\"\n\nCodeclass(mn_water)\n\n[1] \"sf\"         \"data.frame\"\n\n\nWhen we read in spatial objects, it is useful to check what CRS underlies the data. We can do that with st_crs() from the sf package:\n\nCodest_crs(nc)\n\nCoordinate Reference System:\n  User input: NAD27 \n  wkt:\nGEOGCRS[\"NAD27\",\n    DATUM[\"North American Datum 1927\",\n        ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4267]]\n\n\nWe can treat sf objects similarly to ordinary datasets when using ggplot2 to make spatial visualizations:\n\nCodeggplot(nc) +\n    geom_sf() +\n    theme_classic() +\n    labs(title = \"NAD27\")\n\n\n\n\n\n\n\nChange CRS\n\nLet’s explore how changing the CRS changes the map. The st_transform() function in sf re-expresses a spatial object using a user-supplied CRS. The crs argument takes a string descriptor of the CRS. We can find these descriptors via https://epsg.io. In the example below, I searched for “South Carolina”.\n\nThe goal is to use https://epsg.io to find two CRSs that result in a North Carolina map that is noticeably different from the original in the NAD27 CRS.\nTake a look at the function below that re-maps a spatial object using a new CRS.\n\nRead through the function to get a sense for how this code works.\n\nspatial_obj and new_crs are called arguments (function inputs).\n\nAdd one more argument called title to this function. Use this input to set the plot title.\n\n\nUse your function to make two new maps using your chosen CRSs.\n\n\nCodetransform_and_plot &lt;- function(spatial_obj, new_crs) {\n    spatial_obj |&gt; \n        st_transform(crs = new_crs) |&gt; \n        ggplot() +\n            geom_sf() +\n            theme_classic()\n}\n\n# Example usage of this function (using a South Carolina CRS)\ntransform_and_plot(nc, new_crs = \"EPSG:32133\")\n\n\n\n\n\n\n\nVerify your understanding: If you had point location data that was not in the NAD27 CRS, what would you expect about the accuracy of how they would be overlaid on the original North Carolina map?",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#mn-map-with-multiple-layers",
    "href": "src/ica/04-adv-maps-1-notes.html#mn-map-with-multiple-layers",
    "title": "4 Adv Spatial Viz P1",
    "section": "MN Map with Multiple Layers",
    "text": "MN Map with Multiple Layers\nGoal: create a map of MN with different layers of information (city point locations, county polygon boundaries, rivers as lines and polygons, and a raster elevation map).\nGet County Boundaries\n\nWe’ve already read in city location and water information from external shapefiles. We can access county boundaries with the us_counties() function in the USAboundaries package.\n\n\nCode# Load country boundaries data as sf object\nmn_counties &lt;- USAboundaries::us_counties(resolution = \"high\", states = \"Minnesota\")\n\n# Take care of duplicate column names (there are two identical \"state_name\" columns)\nnames_counties &lt;- names(mn_counties)\nnames(mn_counties)[names_counties == \"state_name\"] &lt;- c(\"state_name1\", \"state_name2\")\n\n\nUnifying CRSs Across Different Spatial Datasets\n\nWe first need to ensure that the CRS is the same for all spatial datasets.\n\n\nCheck the CRS for the mn_cities, mn_water, and mn_counties datasets.\nIf the datasets don’t all have the same CRS, use st_transform() to update the datasets to have the same CRS as mn_cities. You can use crs = st_crs(mn_cities) within st_transform().\n\n\nCodest_crs(mn_cities)\n\nCoordinate Reference System:\n  User input: NAD83 / UTM zone 15N \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 15N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 15N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-93,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    ID[\"EPSG\",26915]]\n\nCodest_crs(mn_water)\n\nCoordinate Reference System:\n  User input: NAD83 / UTM zone 15N \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 15N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 15N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-93,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    ID[\"EPSG\",26915]]\n\nCodest_crs(mn_counties)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nCode# Transform the CRS of county data to the more local CRS of the cities\nmn_counties &lt;- mn_counties |&gt;\n    st_transform(crs = st_crs(mn_cities))\n\n# Check the new CRS for mn_counties\nst_crs(mn_counties)\n\nCoordinate Reference System:\n  User input: NAD83 / UTM zone 15N \n  wkt:\nPROJCRS[\"NAD83 / UTM zone 15N\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"UTM zone 15N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-93,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    ID[\"EPSG\",26915]]\n\n\nCounties + Cities\n\nCreate a map where city locations are overlaid on a map of county boundaries.\n\n\nYou will need to call geom_sf() twice.\nMake the map background white.\nInstall the ggthemes package, and add the following layer to use a clean map theme: + ggthemes::theme_map()\n\n\n\nCodeggplot() + # plot frame\n    geom_sf(data = mn_counties, fill = \"white\") + # county boundary layer\n    geom_sf(data = mn_cities, size = 0.5) + # city point layer\n    ggthemes::theme_map()\n\n\n\n\n\n\n\nCustomize Colors\n\nWe can use traditional ggplot2 aesthetics (e.g., fill, color) to display location specific attributes. Below we only plot large cities, and we color and size cities according to their population.\n\n\nCodeggplot() +\n    geom_sf(data = mn_counties, fill = \"white\") + \n    geom_sf(data = mn_cities |&gt; filter(Population &gt;= 10000), mapping = aes(color = Population, size = Population)) + # cities layer\n    scale_color_viridis_c() + # continuous (gradient) color scale\n    labs(title = \"Minnesota Cities with Population &gt;= 10,000\") + \n    ggthemes::theme_map() +\n    theme(legend.position = \"bottom\") # move legend\n\n\n\n\n\n\n\nLook up the scale_color_viridis_c() documentation via the ggplot2 reference.\n\nRead the function description at the top. What is the advantage of using this function for making color palettes?\nLook through the examples section. What is the difference between the _d(), _c(), and _b() variants of this function?\nAdding Elevation Raster Data\nWhere are large cities located? Is there some relationship to local geography/terrain?\n\nTo investigate these questions, we can obtain elevation data to include on the map using the elevatr package. We encounter two new functions here—we can look up their documentation to make sense of the code by entering the following in the Console:\n\n\n?elevatr::get_elev_raster\n?terra::as.data.frame\n\n\nCodeelevation &lt;- elevatr::get_elev_raster(mn_counties, z = 5, clip = \"bbox\")\nraster::crs(elevation) &lt;- sf::st_crs(mn_counties)\n\n# Convert to data frame for plotting\nelev_df &lt;- elevation |&gt; terra::as.data.frame(xy = TRUE)\ncolnames(elev_df) &lt;- c(\"x\", \"y\", \"elevation\")\n\n\nBuild on our existing map by adding a raster layer for elevation as the background.\n\nLook up the documentation for geom_raster() to plot the elevation data from elev_df. This will be the first layer of the plot.\nLook at the documentation for scale_fill_gradient() to add the following elevation color scale: \"darkgreen\" represents the lowest elevations, and \"white\" represents the highest elevations.\nAdd in the layers from the map above to show the largest cities and the county outlines. To remove a background color, use fill = NA.\n\n\nCodeggplot() +\n    geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) + # adding the elevation as first (bottom) layer\n    scale_fill_gradient(low = \"darkgreen\", high = \"white\", guide = FALSE) +\n    geom_sf(data = mn_counties, fill = NA, color = \"black\") + \n    geom_sf(data = mn_cities |&gt; filter(Population &gt;= 10000), mapping = aes(color = Population, size = Population))+ # cities layer\n    scale_color_viridis_c() + # continuous (gradient) color scale\n    labs(title = \"Minnesota Cities with Population &gt;= 10,000\") + \n    ggthemes::theme_map() +\n    theme(legend.position = \"bottom\") # move legend\n\n\n\n\n\n\n\nZoom in to Twin Cities and Add Water\n\nThe bulk of the interesting information in this map is in the Twin Cities area. Let’s zoom in to this area.\n\n\nWe can use the st_bbox() function to get the bounding box for a spatial object—we do this after filtering to the 7 counties in the Twin Cities.\nWe then use st_crop() to trim a spatial object to a given bounding box.\n\n\nCodeseven_countyarea &lt;- mn_counties |&gt;\n    filter(name %in% c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\")) |&gt; \n    st_bbox()\nseven_countyarea\n\n     xmin      ymin      xmax      ymax \n 419967.1 4924212.8  521254.8 5029157.4 \n\nCodeelevation &lt;- elevatr::get_elev_raster(mn_counties |&gt; st_crop(seven_countyarea), z = 9, clip = \"bbox\")\nraster::crs(elevation) &lt;- sf::st_crs(mn_counties)\n\n# Convert to data frame for plotting\nelev_df &lt;- elevation |&gt; terra::as.data.frame(xy = TRUE)\ncolnames(elev_df) &lt;- c(\"x\", \"y\", \"elevation\")\n\n\nIn the plot below, we add a layer for water information and a coord_sf() layer to restrict the x and y-axis limits to the Twin Cities bounding box. (Without this layer, the map would zoom back out to show all counties and bodies of water).\n\nCodeggplot() +\n    geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) + \n    geom_sf(data = mn_counties, fill = NA, color = \"black\") + # county boundary layer\n    geom_sf(data = mn_water, fill = \"lightsteelblue1\", color = \"lightsteelblue1\") + # NEW: river/lake layer\n    geom_sf(data = mn_cities |&gt; filter(Population &gt;= 10000), mapping = aes(color = Population, size = Population)) + # cities layer\n    scale_color_viridis_c(option = \"magma\") + # continuous (gradient) color scale\n    scale_fill_gradient(low = \"darkgreen\", high = \"white\") + # continuous (gradient) fill scale\n    coord_sf(xlim = seven_countyarea[c(\"xmin\", \"xmax\")], ylim = seven_countyarea[c(\"ymin\", \"ymax\")]) + # NEW: crop map to Twin Cities bounding box\n    labs(title = \"Twin Cities with Population &gt;= 10,000\") + \n    ggthemes::theme_map() +\n    theme(legend.position = \"none\") # remove legend\n\n\n\n\n\n\nCodedev.off\n\nfunction (which = dev.cur()) \n{\n    if (which == 1) \n        stop(\"cannot shut down device 1 (the null device)\")\n    .External(C_devoff, as.integer(which))\n    dev.cur()\n}\n&lt;bytecode: 0x13ef17990&gt;\n&lt;environment: namespace:grDevices&gt;\n\n\nLet’s add to the above code chunk to save the map above to an image file called tc_map_zoom.png in the figures folder. The code example below shows a general template for saving a plot to file. Choose a reasonable width and height. (There are also jpeg() and pdf() functions for writing images.)",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#going-beyond---twin-cities-map-with-leaflet",
    "href": "src/ica/04-adv-maps-1-notes.html#going-beyond---twin-cities-map-with-leaflet",
    "title": "4 Adv Spatial Viz P1",
    "section": "Going Beyond - Twin Cities Map with leaflet\n",
    "text": "Going Beyond - Twin Cities Map with leaflet\n\nBelow we show how to make the MN counties map in the leaflet package.\n\nCodelibrary(leaflet)\n\nmn_counties_leaf &lt;- mn_counties |&gt; st_transform(4326) # Leaflet expects this CRS for vectors\nmn_cities_leaf &lt;- mn_cities |&gt; st_transform(4326)\n\ncities_per_county &lt;- st_join(mn_cities_leaf, mn_counties_leaf) |&gt;\n    st_drop_geometry() |&gt; # removes geometry - makes the following calculation more efficient\n    count(name) \n\nmn_counties_leaf |&gt; \n    filter(name %in% c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\")) |&gt;\n    left_join(cities_per_county) |&gt;\n    leaflet() |&gt; \n    addProviderTiles(\"CartoDB.Positron\") |&gt; \n    addPolygons(\n        color = \"#444444\", weight = 1, smoothFactor = 0.5, opacity = 1.0,\n        fillOpacity = 0.5, fillColor = ~colorQuantile(\"YlOrRd\", n)(n),\n        highlightOptions = highlightOptions(color = \"white\", weight = 2, bringToFront = TRUE)) |&gt;\n    addCircles(data = mn_cities_leaf |&gt; filter(County %in% paste(c(\"Anoka\", \"Hennepin\", \"Ramsey\", \"Dakota\", \"Carver\", \"Washington\", \"Scott\"), \"County\")), color = \"#444444\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/04-adv-maps-1-notes.html#done",
    "href": "src/ica/04-adv-maps-1-notes.html#done",
    "title": "4 Adv Spatial Viz P1",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>4 Adv Spatial Viz P1</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html",
    "href": "src/ica/07-wrangling-2-notes.html",
    "title": "7 Adv Data wrangling P2",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#learning-goals",
    "href": "src/ica/07-wrangling-2-notes.html#learning-goals",
    "title": "7 Adv Data wrangling P2",
    "section": "",
    "text": "Manipulate and explore strings using the stringr package\nConstruct regular expressions to find patterns in strings",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#helpful-cheatsheets",
    "href": "src/ica/07-wrangling-2-notes.html#helpful-cheatsheets",
    "title": "7 Adv Data wrangling P2",
    "section": "Helpful Cheatsheets",
    "text": "Helpful Cheatsheets\nThe stringr cheatsheet (HTML, PDF) will be useful to have open and reference.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#motivation-30-years-of-american-anxieties",
    "href": "src/ica/07-wrangling-2-notes.html#motivation-30-years-of-american-anxieties",
    "title": "7 Adv Data wrangling P2",
    "section": "Motivation: 30 Years of American Anxieties",
    "text": "Motivation: 30 Years of American Anxieties\nIn 2018 the data journalism organization The Pudding featured a story called 30 Years of American Anxieties about themes in 30 years of posts to the Dear Abby column (an American advice column).\nOne way to understand themes in text data is to conduct a qualitative analysis, a methodology in which multiple readers read through instances of text several times to reach a consensus about themes.\nAnother way to understand themes in text data is computational text analysis.\n\nThis is what we will explore today.\n\nBoth qualitative analysis and computational tools can be used in tandem. Often, using computational tools can help focus a close reading of select texts, which parallels the spirit of a qualitative analysis.\nTo prepare ourselves for a computational analysis, let’s learn about strings.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#strings",
    "href": "src/ica/07-wrangling-2-notes.html#strings",
    "title": "7 Adv Data wrangling P2",
    "section": "Strings",
    "text": "Strings\nStrings are objects of the character class (abbreviated as &lt;chr&gt; in tibbles).\nWhen you print out strings, they display with double quotes:\n\nCodesome_string &lt;- \"banana\"\nsome_string\n\n[1] \"banana\"\n\n\nWorking with strings generally will involve the use of regular expressions, a tool for finding patterns in strings.\nRegular expressions (regex, for short) look like the following:\n\"^the\" (Strings that start with \"the\")\n\"end$\" (Strings that end with \"end\")\nBefore getting to regular expressions, let’s go over some fundamentals about working with strings. The stringr package (available within tidyverse) is great for working with strings.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#creating-strings",
    "href": "src/ica/07-wrangling-2-notes.html#creating-strings",
    "title": "7 Adv Data wrangling P2",
    "section": "Creating strings",
    "text": "Creating strings\nCreating strings by hand is useful for testing out regular expressions.\nTo create a string, type any text in either double quotes (\") or single quotes '. Using double or single quotes doesn’t matter unless your string itself has single or double quotes.\n\nCodestring1 &lt;- \"This is a string\"\nstring2 &lt;- 'If I want to include a \"quote\" inside a string, I use single quotes'\nstring3 &lt;- c(string1, string2) # string / character vector (of greater than length 1)\n\n\nclass(string1)\n\n[1] \"character\"\n\nCodeclass(string2)\n\n[1] \"character\"\n\nCodeclass(string3)\n\n[1] \"character\"\n\nCodelength(string1)\n\n[1] 1\n\nCodelength(string2)\n\n[1] 1\n\nCodelength(string3)\n\n[1] 2\n\n\nWe can view these strings “naturally” (without the opening and closing quotes) with str_view():\n\nCodestr_view(string1)\n\n[1] │ This is a string\n\nCodestr_view(string2)\n\n[1] │ If I want to include a \"quote\" inside a string, I use single quotes\n\nCodestr_view(string3)\n\n[1] │ This is a string\n[2] │ If I want to include a \"quote\" inside a string, I use single quotes\n\n\nExercise: Create the string It's Thursday. What happens if you put the string inside single quotes? Double quotes?\n\nCode# Your code\nstring1 &lt;- \"It's Thursday\"\n\n\nIt doesn’t work with single quotes because it thinks it ends the string after It. Because \" and ' are special characters in the creation of strings, R offers another way to put them inside a string. We can escape these special characters by putting a \\ in front of them:\n\nCodestring1 &lt;- \"This is a string with \\\"double quotes\\\"\"\nstring2 &lt;- \"This is a string with \\'single quotes\\'\"\nstr_view(string1)\n\n[1] │ This is a string with \"double quotes\"\n\nCodestr_view(string2)\n\n[1] │ This is a string with 'single quotes'\n\n\nGiven that \\ is a special character, how can we put the \\ character in strings? We have to escape it with \\\\.\nExercise: Create the string C:\\Users. What happens when you don’t escape the \\?\n\nCode# Your code\n#string1 &lt;- 'C:\\Users'\nstring2 &lt;- 'C:\\\\Users'\nstr_view(string2)\n\n[1] │ C:\\Users\n\n\nIf you fail to escape, you get an error Other special characters include:\n\n\n\\t (Creates a tab)\n\n\\n (Creates a newline)\n\nBoth can be useful in plots to more neatly arrange text.\n\nCodestring1 &lt;- \"Record temp:\\t102\"\nstring2 &lt;- \"Record temp:\\n102\"\n\nstr_view(string1)\n\n[1] │ Record temp:{\\t}102\n\nCodestr_view(string2)\n\n[1] │ Record temp:\n    │ 102\n\n\nCan we get str_view() to show the tab instead of {\\t}? We can use the html argument to have the string displayed as if on a webpage:\n\nCodestr_view(string1, html = TRUE)\n\n\nOften we will want to create new strings within data frames. We can use str_c() or str_glue(), both of which are vectorized functions (meaning they take vectors as inputs and provide vectors as outputs - can be used within mutate()):\n\nWith str_c() the strings to be combined are all separate arguments separated by commas.\nWith str_glue() the desired string is written as a template with variable names inside curly braces {}.\n\n\nCodedf &lt;- tibble(\n    first_name = c(\"Arya\", \"Olenna\", \"Tyrion\", \"Melisandre\"),\n    last_name = c(\"Stark\", \"Tyrell\", \"Lannister\", NA)\n)\ndf\n\n# A tibble: 4 × 2\n  first_name last_name\n  &lt;chr&gt;      &lt;chr&gt;    \n1 Arya       Stark    \n2 Olenna     Tyrell   \n3 Tyrion     Lannister\n4 Melisandre &lt;NA&gt;     \n\nCodedf |&gt;\n    mutate(\n        full_name1 = str_c(first_name, \" \", last_name),\n        full_name2 = str_glue(\"{first_name} {last_name}\")\n    )\n\n# A tibble: 4 × 4\n  first_name last_name full_name1       full_name2      \n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;            &lt;glue&gt;          \n1 Arya       Stark     Arya Stark       Arya Stark      \n2 Olenna     Tyrell    Olenna Tyrell    Olenna Tyrell   \n3 Tyrion     Lannister Tyrion Lannister Tyrion Lannister\n4 Melisandre &lt;NA&gt;      &lt;NA&gt;             Melisandre NA   \n\n\nExercise: In the following data frame, create a full date string in month-day-year format using both str_c() and str_glue().\n\nCodedf_dates &lt;- tibble(\n    year = c(2000, 2001, 2002),\n    month = c(\"Jan\", \"Feb\", \"Mar\"),\n    day = c(3, 4, 5)\n)\n\n\ndf_dates |&gt;\n    mutate(\n        full_name1 = str_c(month, \" \",day, \" \",year),\n        full_name2 = str_glue(\"{month} {day}{year}\")\n    )\n\n# A tibble: 3 × 5\n   year month   day full_name1 full_name2\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;glue&gt;    \n1  2000 Jan       3 Jan 3 2000 Jan 32000 \n2  2001 Feb       4 Feb 4 2001 Feb 42001 \n3  2002 Mar       5 Mar 5 2002 Mar 52002",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#extracting-information-from-strings",
    "href": "src/ica/07-wrangling-2-notes.html#extracting-information-from-strings",
    "title": "7 Adv Data wrangling P2",
    "section": "Extracting information from strings",
    "text": "Extracting information from strings\nThe str_length() counts the number of characters in a string.\n\nCodecomments &lt;- tibble(\n    name = c(\"Alice\", \"Bob\"),\n    comment = c(\"The essay was well organized around the core message and had good transitions.\", \"Good job!\")\n)\n\ncomments |&gt;\n    mutate(\n        comment_length = str_length(comment)\n    )\n\n# A tibble: 2 × 3\n  name  comment                                                   comment_length\n  &lt;chr&gt; &lt;chr&gt;                                                              &lt;int&gt;\n1 Alice The essay was well organized around the core message and…             78\n2 Bob   Good job!                                                              9\n\n\nThe str_sub() function gets a substring of a string. The 2nd and 3rd arguments indicate the beginning and ending position to extract.\n\nNegative positions indicate the position from the end of the word. (e.g., -3 indicates “3rd letter from the end”)\nSpecifying a position that goes beyond the word won’t result in an error. str_sub() will just go as far as possible.\n\n\nCodex &lt;- c(\"Apple\", \"Banana\", \"Pear\")\n\nstr_sub(x, start = 1, end = 3)\n\n[1] \"App\" \"Ban\" \"Pea\"\n\nCodestr_sub(x, start = -3, end = -1)\n\n[1] \"ple\" \"ana\" \"ear\"\n\nCodestr_sub(x, start = 2, end = -1)\n\n[1] \"pple\"  \"anana\" \"ear\"  \n\nCodestr_sub(\"a\", start = 1, end = 15)\n\n[1] \"a\"\n\n\nExercise: Using str_sub(), create a new variable with only the middle letter of each word in the data frame below. (Challenge: How would you handle words with an even number of letters?)\n\nCodelibrary(tidyverse)\n\ndf &lt;- tibble(\n  word_id = 1:3,\n  word = c(\"replace\", \"match\", \"pattern\")\n)\n\n# Create a new variable with the middle letter\ndf %&gt;%\n  mutate(\n    middle_letter = str_sub(word,\n      start = (str_length(word) + 1) / 2,\n      end = (str_length(word) + 1) / 2\n    )\n  )\n\n# A tibble: 3 × 3\n  word_id word    middle_letter\n    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;        \n1       1 replace l            \n2       2 match   t            \n3       3 pattern t",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#finding-patterns-in-strings-with-regular-expressions",
    "href": "src/ica/07-wrangling-2-notes.html#finding-patterns-in-strings-with-regular-expressions",
    "title": "7 Adv Data wrangling P2",
    "section": "Finding patterns in strings with regular expressions",
    "text": "Finding patterns in strings with regular expressions\nSuppose that you’re exploring text data looking for places where people describe happiness. There are many ways to search. We could search for the word “happy” but that excludes “happiness” so we might search for “happi”.\nRegular expressions (regex) are a powerful language for describing patterns within strings.\n. . .\n\nCodedata(fruit)\ndata(words)\ndata(sentences)\n\n\nWe can use str_view() with the pattern argument to see what parts of a string match the regex supplied in the pattern argument. (Matches are enclosed in &lt;&gt;.)\n\nCodestr_view(fruit, \"berry\")\n\n [6] │ bil&lt;berry&gt;\n [7] │ black&lt;berry&gt;\n[10] │ blue&lt;berry&gt;\n[11] │ boysen&lt;berry&gt;\n[19] │ cloud&lt;berry&gt;\n[21] │ cran&lt;berry&gt;\n[29] │ elder&lt;berry&gt;\n[32] │ goji &lt;berry&gt;\n[33] │ goose&lt;berry&gt;\n[38] │ huckle&lt;berry&gt;\n[50] │ mul&lt;berry&gt;\n[70] │ rasp&lt;berry&gt;\n[73] │ salal &lt;berry&gt;\n[76] │ straw&lt;berry&gt;\n\n\nEssentials of forming a regex\n\nLetters and numbers in a regex are matched exactly and are called literal characters.\nMost punctuation characters, like ., +, *, [, ], and ?, have special meanings and are called metacharacters.\n\nQuantifiers come after a regex and control how many times a pattern can match:\n\n\n?: match the preceding pattern 0 or 1 times\n\n+: match the preceding pattern at least once\n\n*: match the preceding pattern at least 0 times (any number of times)\n\n\n\n. . .\nExercise: Before running the code below, predict what matches will be made. Run the code to check your guesses. Note that in all regex’s below the ?, +, * applies to the b only (not the a).\n\nCodestr_view(c(\"a\", \"ab\", \"abb\"), \"ab?\")\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab+\")\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab*\")\n\n\n\nWe can match any of a set of characters with [] (called a character class), e.g., [abcd] matches “a”, “b”, “c”, or “d”.\n\nWe can invert the match by starting with ^: [^abcd] matches anything except “a”, “b”, “c”, or “d”.\n\n\n\n\nCode# Match words that have vowel-x-vowel\nstr_view(words, \"[aeiou]x[aeiou]\")\n\n[284] │ &lt;exa&gt;ct\n[285] │ &lt;exa&gt;mple\n[288] │ &lt;exe&gt;rcise\n[289] │ &lt;exi&gt;st\n\nCode# Match words that have not_vowel-y-not_vowel\nstr_view(words, \"[^aeiou]y[^aeiou]\")\n\n[836] │ &lt;sys&gt;tem\n[901] │ &lt;typ&gt;e\n\n\nExercise Using the words data, find words that have two vowels in a row followed by an “m”.\n\nCode# Your code\nstr_view(words, \"[aeiou][aeiou]m\")\n\n[154] │ cl&lt;aim&gt;\n[714] │ r&lt;oom&gt;\n[735] │ s&lt;eem&gt;\n[844] │ t&lt;eam&gt;\n\n\n\nThe alternation operator | can be read just like the logical operator | (“OR”) to pick between one or more alternative patterns. e.g., apple|banana searches for “apple” or “banana”.\n\n\nCodestr_view(fruit, \"apple|melon|nut\")\n\n [1] │ &lt;apple&gt;\n[13] │ canary &lt;melon&gt;\n[20] │ coco&lt;nut&gt;\n[52] │ &lt;nut&gt;\n[62] │ pine&lt;apple&gt;\n[72] │ rock &lt;melon&gt;\n[80] │ water&lt;melon&gt;\n\n\nExercise: Using the fruit data, find fruits that have a repeated vowel (“aa”, “ee”, “ii”, “oo”, or “uu”.)\n\nCode# Your code\nstr_view(fruit, \"aa|ee|ii|oo|uu\")\n\n [9] │ bl&lt;oo&gt;d orange\n[33] │ g&lt;oo&gt;seberry\n[47] │ lych&lt;ee&gt;\n[66] │ purple mangost&lt;ee&gt;n\n\n\n\nThe ^ operator indicates the beginning of a string, and the $ operator indicates the end of a string. e.g., ^a matches strings that start with “a”, and a$ matches words that end with “a”.\nParentheses group together parts of a regular expression that should be taken as a bundle. (Much like parentheses in arithmetic statements.)\n\ne.g., ab+ is a little confusing. Does it match “ab” one or more times? Or does it match “a” first, then just “b” one or more times? (The latter, as we saw in an earlier example.) We can be very explicit and use a(b)+.\n\n\n\nExercise: Using the words data, find (1) words that start with “y” and (2) words that don’t start with “y”.\n\nCode# Your code\n# Match words that have vowel-x-vowel\nstr_view(words, \"^y\")\n\n[975] │ &lt;y&gt;ear\n[976] │ &lt;y&gt;es\n[977] │ &lt;y&gt;esterday\n[978] │ &lt;y&gt;et\n[979] │ &lt;y&gt;ou\n[980] │ &lt;y&gt;oung\n\nCode# Match words that have not_vowel-y-not_vowel\nstr_view(words, \"[^y]\")\n\n [1] │ &lt;a&gt;\n [2] │ &lt;a&gt;&lt;b&gt;&lt;l&gt;&lt;e&gt;\n [3] │ &lt;a&gt;&lt;b&gt;&lt;o&gt;&lt;u&gt;&lt;t&gt;\n [4] │ &lt;a&gt;&lt;b&gt;&lt;s&gt;&lt;o&gt;&lt;l&gt;&lt;u&gt;&lt;t&gt;&lt;e&gt;\n [5] │ &lt;a&gt;&lt;c&gt;&lt;c&gt;&lt;e&gt;&lt;p&gt;&lt;t&gt;\n [6] │ &lt;a&gt;&lt;c&gt;&lt;c&gt;&lt;o&gt;&lt;u&gt;&lt;n&gt;&lt;t&gt;\n [7] │ &lt;a&gt;&lt;c&gt;&lt;h&gt;&lt;i&gt;&lt;e&gt;&lt;v&gt;&lt;e&gt;\n [8] │ &lt;a&gt;&lt;c&gt;&lt;r&gt;&lt;o&gt;&lt;s&gt;&lt;s&gt;\n [9] │ &lt;a&gt;&lt;c&gt;&lt;t&gt;\n[10] │ &lt;a&gt;&lt;c&gt;&lt;t&gt;&lt;i&gt;&lt;v&gt;&lt;e&gt;\n[11] │ &lt;a&gt;&lt;c&gt;&lt;t&gt;&lt;u&gt;&lt;a&gt;&lt;l&gt;\n[12] │ &lt;a&gt;&lt;d&gt;&lt;d&gt;\n[13] │ &lt;a&gt;&lt;d&gt;&lt;d&gt;&lt;r&gt;&lt;e&gt;&lt;s&gt;&lt;s&gt;\n[14] │ &lt;a&gt;&lt;d&gt;&lt;m&gt;&lt;i&gt;&lt;t&gt;\n[15] │ &lt;a&gt;&lt;d&gt;&lt;v&gt;&lt;e&gt;&lt;r&gt;&lt;t&gt;&lt;i&gt;&lt;s&gt;&lt;e&gt;\n[16] │ &lt;a&gt;&lt;f&gt;&lt;f&gt;&lt;e&gt;&lt;c&gt;&lt;t&gt;\n[17] │ &lt;a&gt;&lt;f&gt;&lt;f&gt;&lt;o&gt;&lt;r&gt;&lt;d&gt;\n[18] │ &lt;a&gt;&lt;f&gt;&lt;t&gt;&lt;e&gt;&lt;r&gt;\n[19] │ &lt;a&gt;&lt;f&gt;&lt;t&gt;&lt;e&gt;&lt;r&gt;&lt;n&gt;&lt;o&gt;&lt;o&gt;&lt;n&gt;\n[20] │ &lt;a&gt;&lt;g&gt;&lt;a&gt;&lt;i&gt;&lt;n&gt;\n... and 960 more",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#exploring-stringr-functions",
    "href": "src/ica/07-wrangling-2-notes.html#exploring-stringr-functions",
    "title": "7 Adv Data wrangling P2",
    "section": "Exploring stringr functions",
    "text": "Exploring stringr functions\nRead in the “Dear Abby” data underlying The Pudding’s 30 Years of American Anxieties article.\n\nCodeposts &lt;- read_csv(\"https://raw.githubusercontent.com/the-pudding/data/master/dearabby/raw_da_qs.csv\")\n\n\nTake a couple minutes to scroll through the 30 Years of American Anxieties article to get ideas for themes that you might want to search for using regular expressions.\n\nThe following are core stringr functions that use regular expressions:\n\n\nstr_view() - View the first occurrence in a string that matches the regex\n\nstr_count() - Count the number of times a regex matches within a string\n\nstr_detect() - Determine if (TRUE/FALSE) the regex is found within string\n\nstr_subset() - Return subset of strings that match the regex\n\nstr_extract(), str_extract_all() - Return portion of each string that matches the regex. str_extract() extracts the first instance of the match. str_extract_all() extracts all matches.\n\nstr_replace(), str_replace_all() - Replace portion of string that matches the regex with something else. str_replace() replaces the first instance of the match. str_replace_all() replaces all instances of the match.\n\nstr_remove(), str_remove_all() - Removes the portion of the string that matches the pattern. Equivalent to str_replace(x, \"THE REGEX PATTERN\", \"\")\n\n\nExercise: Starting from str_count(), explore each of these functions by pulling up the function documentation page and reading through the arguments. Try out each function using the posts data.\n\nCodedf &lt;- tibble(\n    word_id = 1:3,\n    word = c(\"replace\", \"match\", \"pattern\")\n)\n\ndf |&gt;\n    mutate(\n        word_length = str_length(word),\n        middle_pos = ceiling(word_length/2),\n        middle_letter = str_sub(word, middle_pos, middle_pos)\n    )\n\n# A tibble: 3 × 5\n  word_id word    word_length middle_pos middle_letter\n    &lt;int&gt; &lt;chr&gt;         &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;        \n1       1 replace           7          4 l            \n2       2 match             5          3 t            \n3       3 pattern           7          4 t            \n\n\nExercise: Using the words data, find (1) words that start with “y” and (2) words that don’t start with “y”.\n\nCode# This regex finds \"a\" then \"b\" at most once (can't have 2 or more b's in a row)\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab?\")\n\n[1] │ &lt;a&gt;\n[2] │ &lt;ab&gt;\n[3] │ &lt;ab&gt;b\n\nCode# There has to be an \"a\" followed by at least one b\n# This is why the first string \"a\" isn't matched\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab+\")\n\n[2] │ &lt;ab&gt;\n[3] │ &lt;abb&gt;\n\nCode# There must be an \"a\" and then any number of b's (including zero)\nstr_view(c(\"a\", \"ab\", \"abb\"), \"ab*\")\n\n[1] │ &lt;a&gt;\n[2] │ &lt;ab&gt;\n[3] │ &lt;abb&gt;\n\nCodestr_view(words, \"[aeiou][aeiou]m\")\n\n[154] │ cl&lt;aim&gt;\n[714] │ r&lt;oom&gt;\n[735] │ s&lt;eem&gt;\n[844] │ t&lt;eam&gt;\n\nCodestr_view(fruit, \"aa|ee|ii|oo|uu\")\n\n [9] │ bl&lt;oo&gt;d orange\n[33] │ g&lt;oo&gt;seberry\n[47] │ lych&lt;ee&gt;\n[66] │ purple mangost&lt;ee&gt;n\n\nCode# Words that start with y\nstr_view(words, \"^y\")\n\n[975] │ &lt;y&gt;ear\n[976] │ &lt;y&gt;es\n[977] │ &lt;y&gt;esterday\n[978] │ &lt;y&gt;et\n[979] │ &lt;y&gt;ou\n[980] │ &lt;y&gt;oung\n\nCode# Words that don't start with y\nstr_view(words, \"^[^y]\")\n\n [1] │ &lt;a&gt;\n [2] │ &lt;a&gt;ble\n [3] │ &lt;a&gt;bout\n [4] │ &lt;a&gt;bsolute\n [5] │ &lt;a&gt;ccept\n [6] │ &lt;a&gt;ccount\n [7] │ &lt;a&gt;chieve\n [8] │ &lt;a&gt;cross\n [9] │ &lt;a&gt;ct\n[10] │ &lt;a&gt;ctive\n[11] │ &lt;a&gt;ctual\n[12] │ &lt;a&gt;dd\n[13] │ &lt;a&gt;ddress\n[14] │ &lt;a&gt;dmit\n[15] │ &lt;a&gt;dvertise\n[16] │ &lt;a&gt;ffect\n[17] │ &lt;a&gt;fford\n[18] │ &lt;a&gt;fter\n[19] │ &lt;a&gt;fternoon\n[20] │ &lt;a&gt;gain\n... and 954 more",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/ica/07-wrangling-2-notes.html#done",
    "href": "src/ica/07-wrangling-2-notes.html#done",
    "title": "7 Adv Data wrangling P2",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>7 Adv Data wrangling P2</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample1.html",
    "href": "src/appx/appx-sample1.html",
    "title": "Appendix A — Appendix Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix Sample 1</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample2.html",
    "href": "src/appx/appx-sample2.html",
    "title": "Appendix B — Appendix Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Appendix Sample 2</span>"
    ]
  },
  {
    "objectID": "mm/mm.html",
    "href": "mm/mm.html",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "Creativity",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  },
  {
    "objectID": "mm/mm.html#creativity",
    "href": "mm/mm.html#creativity",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "0808-mind_map_example.jpg",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  }
]